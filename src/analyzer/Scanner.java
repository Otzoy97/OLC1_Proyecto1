/* The following code was generated by JFlex 1.7.0 */

//Paquete
package analyzer;
//Import
import java_cup.runtime.Symbol;
import java.util.LinkedList;
//Lista

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>scanner.jflex</tt>
 */
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int HTML = 2;
  public static final int CUERPO = 4;
  public static final int PARRAFO = 6;
  public static final int IMAGEN = 8;
  public static final int BOTON = 10;
  public static final int TABLA = 12;
  public static final int HSCRIPT = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7, 7
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
    57, 57, 57, 57, 57, 57, 57, 57, 57, 15,  9, 55, 16,  5, 57, 57, 
    57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 
    17,  2,  8, 14, 12, 57, 47, 57, 41, 42,  6, 39, 51, 40, 10,  4, 
     7,  7,  7,  7,  7,  7,  7,  7,  7,  7, 57, 50,  1, 49,  3, 37, 
    57, 24, 25, 18, 52, 26, 33, 35, 38, 23, 11, 54, 30, 20, 36, 19, 
    21, 11, 27, 32, 28, 29, 11, 11, 34, 11, 11, 45, 57, 46, 57, 13, 
    57, 24, 25, 18, 52, 26, 33, 35, 38, 23, 11, 54, 30, 20, 36, 19, 
    21, 11, 27, 32, 28, 29, 11, 11, 34, 11, 11, 43, 48, 44, 57, 57, 
    57, 57, 57, 57, 57, 55, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 
    57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 
    57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 
    57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 
    57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 
    57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 
    57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 
    57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\2\1\1\2\1\1\1\3\1\4\1\5\1\4"+
    "\1\1\1\6\2\1\1\7\1\1\1\10\2\1\1\0"+
    "\5\1\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\10\1\12\1\20\14\12\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\2\12\1\7\1\31\1\32"+
    "\16\0\1\33\5\0\1\34\4\0\1\35\1\36\1\37"+
    "\3\0\1\40\1\41\2\0\1\42\7\0\1\43\2\0"+
    "\1\44\1\45\1\46\44\0\1\2\2\0\1\47\47\0"+
    "\1\50\2\0\1\51\1\52\3\0\1\53\6\0\1\54"+
    "\1\55\54\0\1\56\1\0\1\57\1\60\1\61\1\62"+
    "\47\0\1\63\2\0\1\64\2\0\1\65\46\0\1\66"+
    "\2\0\1\67\3\0\1\70\1\0\1\71\21\0\1\72"+
    "\1\0\1\73\1\0\1\74\3\0\1\75\1\0\1\76"+
    "\4\0\1\77\7\0\1\100\4\0\1\101\4\0\1\102"+
    "\7\0\1\103\5\0\1\104\3\0\1\105\2\0\1\106"+
    "\12\0\1\107\2\0\1\110\1\111\2\0\1\112\1\113"+
    "\1\114\4\0\1\115\3\0\1\116\4\0\1\117\3\0"+
    "\1\120\2\0\1\121\7\0\1\122\13\0\1\123\26\0"+
    "\1\124\6\0\1\125\5\0\1\126\16\0\1\127\2\0"+
    "\1\130\21\0\1\131\2\0\1\132\1\133\1\0\1\134"+
    "\10\0\1\135\2\0\1\136\46\0\1\137\1\140\1\141"+
    "\40\0\1\142\1\143\1\0\1\144\17\0\1\145\1\146"+
    "\4\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[676];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0196"+
    "\0\u01d0\0\u020a\0\u020a\0\u0244\0\u027e\0\u020a\0\u020a\0\u02b8"+
    "\0\u027e\0\u020a\0\u02f2\0\u032c\0\u020a\0\u0366\0\u03a0\0\u03da"+
    "\0\u0414\0\u044e\0\u044e\0\u0488\0\u04c2\0\u04fc\0\u0536\0\u020a"+
    "\0\u020a\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u020a\0\u0658\0\u02f2"+
    "\0\u020a\0\u0692\0\u06cc\0\u0244\0\u0706\0\u0740\0\u077a\0\u07b4"+
    "\0\u04fc\0\u07ee\0\u0536\0\u0828\0\u0862\0\u020a\0\u020a\0\u020a"+
    "\0\u020a\0\u020a\0\u020a\0\u020a\0\u020a\0\u089c\0\u08d6\0\u0910"+
    "\0\u020a\0\u020a\0\u094a\0\u0984\0\u09be\0\u09f8\0\u0a32\0\u0a6c"+
    "\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8\0\u0c02\0\u02f2"+
    "\0\u020a\0\u0c3c\0\u0c76\0\u0cb0\0\u0cea\0\u0d24\0\u020a\0\u0d5e"+
    "\0\u0d98\0\u0dd2\0\u0e0c\0\u020a\0\u020a\0\u020a\0\u0e46\0\u0e80"+
    "\0\u0eba\0\u0ef4\0\u0f2e\0\u0f68\0\u0fa2\0\u020a\0\u0fdc\0\u1016"+
    "\0\u1050\0\u108a\0\u10c4\0\u10fe\0\u1138\0\u020a\0\u0862\0\u1172"+
    "\0\u020a\0\u020a\0\u020a\0\u11ac\0\u11e6\0\u1220\0\u125a\0\u1294"+
    "\0\u12ce\0\u1308\0\u1342\0\u137c\0\u13b6\0\u13f0\0\u142a\0\u1464"+
    "\0\u149e\0\u14d8\0\u1512\0\u154c\0\u1586\0\u15c0\0\u15fa\0\u1634"+
    "\0\u166e\0\u16a8\0\u16e2\0\u171c\0\u1756\0\u1790\0\u17ca\0\u1804"+
    "\0\u183e\0\u1878\0\u18b2\0\u18ec\0\u1926\0\u1960\0\u199a\0\u0e46"+
    "\0\u19d4\0\u1a0e\0\u0eba\0\u1a48\0\u1a82\0\u1abc\0\u1af6\0\u1b30"+
    "\0\u1b6a\0\u1ba4\0\u1bde\0\u1c18\0\u1c52\0\u1c8c\0\u1cc6\0\u1d00"+
    "\0\u1d3a\0\u1d74\0\u1dae\0\u1de8\0\u1e22\0\u1e5c\0\u1e96\0\u1ed0"+
    "\0\u1f0a\0\u1f44\0\u1f7e\0\u1fb8\0\u1ff2\0\u202c\0\u2066\0\u20a0"+
    "\0\u20da\0\u2114\0\u214e\0\u2188\0\u21c2\0\u21fc\0\u2236\0\u2270"+
    "\0\u22aa\0\u22e4\0\u020a\0\u231e\0\u2358\0\u020a\0\u020a\0\u2392"+
    "\0\u23cc\0\u2406\0\u020a\0\u2440\0\u247a\0\u24b4\0\u24ee\0\u2528"+
    "\0\u2562\0\u020a\0\u020a\0\u259c\0\u25d6\0\u2610\0\u264a\0\u2684"+
    "\0\u26be\0\u26f8\0\u2732\0\u276c\0\u27a6\0\u27e0\0\u281a\0\u2854"+
    "\0\u288e\0\u28c8\0\u2902\0\u293c\0\u2976\0\u29b0\0\u29ea\0\u2a24"+
    "\0\u2a5e\0\u2a98\0\u2ad2\0\u2b0c\0\u2b46\0\u2b80\0\u2bba\0\u2bf4"+
    "\0\u2c2e\0\u2c68\0\u2ca2\0\u2cdc\0\u2d16\0\u2d50\0\u2d8a\0\u2dc4"+
    "\0\u2dfe\0\u2e38\0\u2e72\0\u2eac\0\u2ee6\0\u2f20\0\u2f5a\0\u020a"+
    "\0\u2f94\0\u020a\0\u020a\0\u020a\0\u020a\0\u2fce\0\u3008\0\u3042"+
    "\0\u307c\0\u30b6\0\u30f0\0\u312a\0\u3164\0\u319e\0\u31d8\0\u3212"+
    "\0\u324c\0\u3286\0\u32c0\0\u32fa\0\u3334\0\u336e\0\u33a8\0\u33e2"+
    "\0\u341c\0\u3456\0\u3490\0\u34ca\0\u3504\0\u353e\0\u3578\0\u35b2"+
    "\0\u35ec\0\u3626\0\u3660\0\u369a\0\u36d4\0\u370e\0\u3748\0\u3782"+
    "\0\u37bc\0\u37f6\0\u3830\0\u386a\0\u38a4\0\u38de\0\u3918\0\u3952"+
    "\0\u398c\0\u39c6\0\u020a\0\u3a00\0\u3a3a\0\u3a74\0\u3aae\0\u3ae8"+
    "\0\u3b22\0\u3b5c\0\u3b96\0\u3bd0\0\u3c0a\0\u3c44\0\u3c7e\0\u3cb8"+
    "\0\u3cf2\0\u3d2c\0\u3d66\0\u3da0\0\u3dda\0\u3e14\0\u3e4e\0\u3e88"+
    "\0\u3ec2\0\u3efc\0\u3f36\0\u3f70\0\u3faa\0\u3fe4\0\u401e\0\u4058"+
    "\0\u4092\0\u40cc\0\u4106\0\u4140\0\u417a\0\u41b4\0\u41ee\0\u4228"+
    "\0\u4262\0\u020a\0\u429c\0\u42d6\0\u020a\0\u4310\0\u434a\0\u4384"+
    "\0\u43be\0\u43f8\0\u4432\0\u446c\0\u44a6\0\u44e0\0\u451a\0\u4554"+
    "\0\u458e\0\u45c8\0\u4602\0\u463c\0\u4676\0\u46b0\0\u46ea\0\u4724"+
    "\0\u475e\0\u4798\0\u47d2\0\u480c\0\u020a\0\u4846\0\u020a\0\u4880"+
    "\0\u020a\0\u48ba\0\u48f4\0\u492e\0\u020a\0\u4968\0\u020a\0\u49a2"+
    "\0\u49dc\0\u4a16\0\u4a50\0\u020a\0\u4a8a\0\u4ac4\0\u4afe\0\u4b38"+
    "\0\u4b72\0\u4bac\0\u4be6\0\u020a\0\u4c20\0\u4c5a\0\u4c94\0\u4cce"+
    "\0\u020a\0\u4d08\0\u4d42\0\u4d7c\0\u4db6\0\u020a\0\u4df0\0\u4e2a"+
    "\0\u4e64\0\u4e9e\0\u4ed8\0\u4f12\0\u4f4c\0\u4f86\0\u4fc0\0\u4ffa"+
    "\0\u5034\0\u506e\0\u50a8\0\u020a\0\u50e2\0\u511c\0\u5156\0\u020a"+
    "\0\u5190\0\u51ca\0\u020a\0\u5204\0\u523e\0\u5278\0\u52b2\0\u52ec"+
    "\0\u5326\0\u5360\0\u539a\0\u53d4\0\u540e\0\u020a\0\u5448\0\u5482"+
    "\0\u020a\0\u020a\0\u54bc\0\u54f6\0\u020a\0\u020a\0\u020a\0\u5530"+
    "\0\u556a\0\u55a4\0\u55de\0\u020a\0\u5618\0\u5652\0\u568c\0\u020a"+
    "\0\u56c6\0\u5700\0\u573a\0\u5774\0\u020a\0\u57ae\0\u57e8\0\u5822"+
    "\0\u020a\0\u585c\0\u5896\0\u020a\0\u58d0\0\u590a\0\u5944\0\u597e"+
    "\0\u59b8\0\u59f2\0\u5a2c\0\u020a\0\u5a66\0\u5aa0\0\u5ada\0\u5b14"+
    "\0\u5b4e\0\u5b88\0\u5bc2\0\u5bfc\0\u5c36\0\u5c70\0\u5caa\0\u020a"+
    "\0\u5ce4\0\u5d1e\0\u5d58\0\u5d92\0\u5dcc\0\u5e06\0\u5e40\0\u5e7a"+
    "\0\u5eb4\0\u5eee\0\u5f28\0\u5f62\0\u5f9c\0\u5fd6\0\u6010\0\u604a"+
    "\0\u6084\0\u60be\0\u60f8\0\u6132\0\u616c\0\u61a6\0\u020a\0\u61e0"+
    "\0\u621a\0\u6254\0\u628e\0\u62c8\0\u6302\0\u020a\0\u633c\0\u6376"+
    "\0\u63b0\0\u63ea\0\u6424\0\u020a\0\u645e\0\u6498\0\u64d2\0\u650c"+
    "\0\u6546\0\u6580\0\u65ba\0\u65f4\0\u662e\0\u6668\0\u66a2\0\u66dc"+
    "\0\u6716\0\u6750\0\u020a\0\u678a\0\u67c4\0\u020a\0\u67fe\0\u6838"+
    "\0\u6872\0\u68ac\0\u68e6\0\u6920\0\u695a\0\u6994\0\u69ce\0\u6a08"+
    "\0\u6a42\0\u6a7c\0\u6ab6\0\u6af0\0\u6b2a\0\u6b64\0\u6b9e\0\u020a"+
    "\0\u6bd8\0\u6c12\0\u020a\0\u020a\0\u6c4c\0\u020a\0\u6c86\0\u6cc0"+
    "\0\u6cfa\0\u6d34\0\u6d6e\0\u6da8\0\u6de2\0\u6e1c\0\u020a\0\u6e56"+
    "\0\u6e90\0\u020a\0\u6eca\0\u6f04\0\u6f3e\0\u6f78\0\u6fb2\0\u6fec"+
    "\0\u7026\0\u7060\0\u709a\0\u70d4\0\u710e\0\u7148\0\u7182\0\u71bc"+
    "\0\u71f6\0\u7230\0\u726a\0\u72a4\0\u72de\0\u7318\0\u7352\0\u738c"+
    "\0\u73c6\0\u7400\0\u743a\0\u7474\0\u74ae\0\u74e8\0\u7522\0\u755c"+
    "\0\u7596\0\u75d0\0\u760a\0\u7644\0\u767e\0\u76b8\0\u76f2\0\u772c"+
    "\0\u020a\0\u020a\0\u020a\0\u7766\0\u77a0\0\u77da\0\u7814\0\u784e"+
    "\0\u7888\0\u78c2\0\u78fc\0\u7936\0\u7970\0\u79aa\0\u79e4\0\u7a1e"+
    "\0\u7a58\0\u7a92\0\u7acc\0\u7b06\0\u7b40\0\u7b7a\0\u7bb4\0\u7bee"+
    "\0\u7c28\0\u7c62\0\u7c9c\0\u7cd6\0\u7d10\0\u7d4a\0\u7d84\0\u7dbe"+
    "\0\u7df8\0\u7e32\0\u7e6c\0\u020a\0\u020a\0\u7ea6\0\u020a\0\u7ee0"+
    "\0\u7f1a\0\u7f54\0\u7f8e\0\u7fc8\0\u8002\0\u803c\0\u8076\0\u80b0"+
    "\0\u80ea\0\u8124\0\u815e\0\u8198\0\u81d2\0\u820c\0\u020a\0\u020a"+
    "\0\u8246\0\u8280\0\u82ba\0\u82f4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[676];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\11\3\12\1\13\3\12\1\13\5\12\1\14"+
    "\1\12\1\13\4\12\1\0\10\12\1\0\25\12\1\0"+
    "\2\12\1\0\1\12\1\0\1\15\3\16\1\17\3\16"+
    "\1\17\5\16\1\20\1\16\1\17\4\16\1\0\10\16"+
    "\1\0\25\16\1\0\2\16\1\0\1\16\1\0\1\21"+
    "\1\12\1\22\1\12\1\13\2\12\1\23\1\13\5\12"+
    "\1\14\1\12\1\13\4\12\1\0\10\12\1\0\1\12"+
    "\1\24\17\12\1\25\3\12\1\0\2\12\1\0\1\12"+
    "\1\0\1\21\1\12\1\22\1\12\1\13\2\12\1\23"+
    "\1\13\5\12\1\14\1\12\1\13\4\12\1\0\1\12"+
    "\1\26\6\12\1\0\21\12\1\25\3\12\1\0\2\12"+
    "\1\0\1\12\1\0\1\21\1\12\1\22\1\12\1\13"+
    "\1\12\1\27\1\23\1\13\5\12\1\14\1\12\1\13"+
    "\3\12\1\30\1\0\1\12\1\31\6\12\1\0\21\12"+
    "\1\25\3\12\1\0\2\12\1\0\1\12\1\0\1\21"+
    "\1\12\1\22\1\12\1\13\2\12\1\23\1\13\5\12"+
    "\1\14\1\12\1\13\4\12\1\32\1\33\4\12\1\34"+
    "\2\12\1\0\21\12\1\25\3\12\1\0\2\12\1\0"+
    "\1\12\1\0\1\21\1\12\1\22\1\12\1\13\3\12"+
    "\1\13\5\12\1\14\1\12\1\13\4\12\1\0\2\12"+
    "\1\35\2\12\1\36\2\12\1\0\1\12\1\37\17\12"+
    "\1\40\3\12\1\0\2\12\1\0\1\12\1\41\1\42"+
    "\1\43\1\44\1\45\1\13\1\46\1\47\1\50\1\13"+
    "\1\51\1\41\1\52\1\41\1\53\1\54\1\12\1\13"+
    "\1\55\3\41\2\56\2\41\1\57\1\60\1\61\2\41"+
    "\2\62\1\63\1\41\1\64\1\41\1\65\1\41\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76"+
    "\1\77\1\100\1\101\1\102\3\41\1\12\1\0\1\41"+
    "\1\0\1\103\1\104\1\0\1\105\1\106\3\0\1\106"+
    "\5\0\1\107\1\0\1\106\1\110\2\0\1\111\2\112"+
    "\1\0\1\113\1\114\1\0\1\115\4\0\1\116\3\0"+
    "\1\117\136\0\1\13\53\0\1\104\107\0\1\17\51\0"+
    "\10\120\2\121\60\120\23\0\1\122\104\0\1\123\42\0"+
    "\1\27\112\0\1\124\77\0\1\125\5\0\1\126\111\0"+
    "\1\127\37\0\1\130\62\0\1\131\101\0\1\132\66\0"+
    "\1\133\43\0\1\104\56\0\1\134\71\0\1\135\71\0"+
    "\1\136\14\0\1\137\1\0\1\140\72\0\1\47\2\0"+
    "\1\141\72\0\1\142\6\0\4\142\1\0\10\142\1\0"+
    "\5\142\1\0\1\142\15\0\1\142\1\0\1\142\16\0"+
    "\1\143\6\0\4\143\1\0\10\143\1\0\5\143\1\0"+
    "\1\143\15\0\1\143\1\0\1\143\36\0\1\144\2\0"+
    "\1\145\74\0\1\146\2\0\1\147\47\0\1\150\13\0"+
    "\1\151\65\0\1\152\71\0\1\153\71\0\1\154\40\0"+
    "\1\155\1\0\1\156\1\0\1\157\3\0\1\157\5\0"+
    "\1\160\1\0\1\157\127\0\1\161\72\0\1\162\72\0"+
    "\1\163\12\0\1\164\67\0\3\165\1\166\66\165\1\0"+
    "\1\167\3\0\1\105\3\0\1\105\5\0\1\170\1\0"+
    "\1\105\1\171\2\0\1\172\2\173\1\0\1\174\1\175"+
    "\1\0\1\176\2\0\2\177\1\200\31\0\1\103\2\0"+
    "\1\105\1\106\3\0\1\106\5\0\1\107\1\0\1\106"+
    "\1\110\2\0\1\111\2\112\1\0\1\113\1\114\1\0"+
    "\1\115\4\0\1\116\3\0\1\117\44\0\1\106\74\0"+
    "\1\201\4\0\1\202\4\0\1\203\64\0\1\204\65\0"+
    "\1\205\70\0\1\206\105\0\2\207\57\0\2\210\1\211"+
    "\1\0\1\212\65\0\2\213\43\0\1\214\3\0\1\117"+
    "\3\0\1\117\5\0\1\215\1\0\1\117\24\0\1\216"+
    "\67\0\1\217\53\0\2\220\76\0\1\221\71\0\1\222"+
    "\57\0\1\223\111\0\1\224\62\0\1\225\73\0\1\226"+
    "\72\0\1\227\33\0\5\230\1\0\3\230\1\0\60\230"+
    "\4\231\1\232\65\231\7\0\1\233\71\0\1\142\3\0"+
    "\1\142\1\0\1\142\4\0\4\142\1\0\10\142\1\0"+
    "\5\142\1\0\1\142\15\0\1\142\1\0\1\142\12\0"+
    "\1\143\3\0\1\143\1\0\1\143\4\0\4\143\1\0"+
    "\10\143\1\0\5\143\1\0\1\143\15\0\1\143\1\0"+
    "\1\143\35\0\1\234\65\0\2\235\101\0\2\236\77\0"+
    "\1\237\62\0\2\240\56\0\1\241\100\0\1\242\71\0"+
    "\1\243\37\0\1\244\107\0\1\157\51\0\3\245\1\246"+
    "\66\245\2\165\1\247\67\165\2\0\1\250\1\166\70\0"+
    "\1\251\107\0\1\105\74\0\1\252\4\0\1\253\4\0"+
    "\1\254\64\0\1\255\65\0\1\256\70\0\1\257\105\0"+
    "\2\260\57\0\2\261\1\262\1\0\1\263\67\0\1\264"+
    "\67\0\2\265\66\0\1\266\11\0\1\267\64\0\1\270"+
    "\72\0\1\271\72\0\1\272\66\0\1\273\75\0\1\274"+
    "\62\0\1\275\100\0\1\276\66\0\1\277\102\0\1\300"+
    "\65\0\1\301\35\0\1\302\107\0\1\117\110\0\2\303"+
    "\115\0\1\304\51\0\1\305\73\0\1\306\46\0\1\307"+
    "\114\0\1\310\57\0\1\311\121\0\1\312\37\0\1\313"+
    "\76\0\2\314\31\0\6\231\1\315\63\231\4\0\1\232"+
    "\1\0\1\316\113\0\1\317\63\0\1\320\101\0\1\321"+
    "\62\0\1\322\100\0\1\323\71\0\1\324\61\0\1\325"+
    "\2\0\1\326\2\0\1\327\1\330\2\0\1\331\57\0"+
    "\1\332\2\0\1\333\2\0\1\334\1\335\2\0\1\336"+
    "\35\0\3\337\1\340\66\337\2\245\1\341\67\245\2\0"+
    "\1\342\1\246\66\0\2\165\1\247\1\13\66\165\3\0"+
    "\1\13\66\0\3\343\1\344\66\343\24\0\1\345\11\0"+
    "\1\346\64\0\1\347\72\0\1\350\72\0\1\351\66\0"+
    "\1\352\75\0\1\353\62\0\1\354\100\0\1\355\66\0"+
    "\1\356\102\0\1\357\65\0\1\360\71\0\1\361\60\0"+
    "\1\362\101\0\1\363\66\0\1\364\72\0\1\365\71\0"+
    "\1\366\101\0\1\367\51\0\1\370\76\0\1\371\76\0"+
    "\1\372\72\0\1\373\67\0\1\374\65\0\1\375\41\0"+
    "\3\376\1\377\66\376\23\0\1\u0100\100\0\1\u0101\62\0"+
    "\1\u0102\71\0\1\u0103\100\0\1\u0104\71\0\1\u0105\37\0"+
    "\4\231\1\13\1\231\1\315\63\231\4\0\1\13\120\0"+
    "\1\u0106\123\0\2\u0107\36\0\1\u0108\72\0\1\u0109\60\0"+
    "\1\u010a\76\0\1\u010b\77\0\1\u010c\5\0\1\u010d\50\0"+
    "\1\u010e\100\0\1\u010f\62\0\1\u0110\76\0\1\u0111\77\0"+
    "\1\u0112\5\0\1\u0113\50\0\1\u0114\100\0\1\u0115\37\0"+
    "\2\337\1\u0116\67\337\2\0\1\u0117\1\340\66\0\2\245"+
    "\1\341\1\106\66\245\3\0\1\106\66\0\2\343\1\u0118"+
    "\67\343\2\0\1\u0119\1\344\113\0\1\u011a\101\0\1\u011b"+
    "\66\0\1\u011c\72\0\1\u011d\71\0\1\u011e\101\0\1\u011f"+
    "\51\0\1\u0120\76\0\1\u0121\76\0\1\u0122\72\0\1\u0123"+
    "\67\0\1\u0124\71\0\1\u0125\65\0\1\u0126\67\0\2\u0127"+
    "\66\0\1\u0128\67\0\1\u0129\74\0\1\u012a\74\0\1\u012b"+
    "\73\0\1\u012c\103\0\1\u012d\47\0\1\u012e\105\0\1\u012f"+
    "\63\0\1\u0130\64\0\1\u0131\47\0\1\u0132\1\0\1\u0133"+
    "\1\0\1\375\3\0\1\375\5\0\1\u0134\1\0\1\375"+
    "\50\0\2\376\1\u0135\67\376\2\0\1\u0136\1\377\116\0"+
    "\1\u0137\66\0\1\u0138\2\u0139\1\0\1\u013a\2\0\1\u013b"+
    "\66\0\1\u013c\74\0\1\u013d\63\0\2\u013e\106\0\1\u013f"+
    "\61\0\1\u0140\63\0\2\u0141\4\0\1\u0142\57\0\1\u0143"+
    "\102\0\1\u0144\100\0\1\u0145\73\0\1\u0146\61\0\1\u0147"+
    "\63\0\2\u0148\4\0\1\u0149\57\0\1\u014a\102\0\1\u014b"+
    "\100\0\1\u014c\27\0\2\337\1\u0116\1\157\66\337\3\0"+
    "\1\157\66\0\2\343\1\u0118\1\105\66\343\3\0\1\105"+
    "\114\0\2\u014d\66\0\1\u014e\67\0\1\u014f\74\0\1\u0150"+
    "\74\0\1\u0151\73\0\1\u0152\103\0\1\u0153\47\0\1\u0154"+
    "\105\0\1\u0155\63\0\1\u0156\64\0\1\u0157\71\0\1\u0158"+
    "\47\0\1\u0159\1\0\1\u015a\1\0\1\u0126\3\0\1\u0126"+
    "\5\0\1\u015b\1\0\1\u0126\51\0\1\u015c\1\0\1\u015d"+
    "\1\0\1\u0127\3\0\1\u0127\5\0\1\u015e\1\0\1\u0127"+
    "\114\0\1\u015f\57\0\1\u0160\62\0\1\u0161\107\0\1\u0162"+
    "\74\0\1\u0163\26\0\1\u0164\3\0\1\u012d\3\0\1\u012d"+
    "\5\0\1\u0165\1\0\1\u012d\76\0\2\u0166\65\0\1\u0167"+
    "\47\0\1\u0168\3\0\1\u0130\3\0\1\u0130\5\0\1\u0169"+
    "\1\0\1\u0130\100\0\1\u016a\1\u016b\42\0\1\u016c\107\0"+
    "\1\375\51\0\2\376\1\u0135\1\117\66\376\3\0\1\117"+
    "\110\0\1\u016d\77\0\1\u016e\65\0\1\u016f\70\0\1\u0170"+
    "\76\0\1\u0171\1\0\1\u0172\62\0\1\u0173\76\0\1\u0174"+
    "\74\0\1\u0175\72\0\1\u0176\103\0\1\u0177\67\0\1\u0178"+
    "\50\0\1\u0179\114\0\1\u0142\107\0\1\u017a\41\0\1\u017b"+
    "\71\0\1\u017c\103\0\1\u017d\67\0\1\u017e\50\0\1\u017f"+
    "\114\0\1\u0180\107\0\1\u0181\41\0\1\u0182\36\0\1\u0183"+
    "\1\0\1\u0184\1\0\1\u014d\3\0\1\u014d\5\0\1\u0185"+
    "\1\0\1\u014d\114\0\1\u0186\57\0\1\u0187\62\0\1\u0188"+
    "\107\0\1\u0189\74\0\1\u018a\26\0\1\u018b\1\0\1\u018c"+
    "\1\0\1\u0153\3\0\1\u0153\5\0\1\u018d\1\0\1\u0153"+
    "\76\0\2\u018e\65\0\1\u018f\47\0\1\u0190\1\0\1\u0191"+
    "\1\0\1\u0156\3\0\1\u0156\5\0\1\u0192\1\0\1\u0156"+
    "\100\0\1\u0193\1\u0194\41\0\1\u0195\1\0\1\u0196\1\0"+
    "\1\u0158\3\0\1\u0158\5\0\1\u0197\1\0\1\u0158\52\0"+
    "\1\u0198\107\0\1\u0126\53\0\1\u0199\107\0\1\u0127\101\0"+
    "\1\u019a\74\0\1\u019b\37\0\1\u019c\3\0\1\u0161\3\0"+
    "\1\u0161\5\0\1\u019d\1\0\1\u0161\73\0\1\u019e\47\0"+
    "\1\u019f\3\0\1\u0163\3\0\1\u0163\5\0\1\u01a0\1\0"+
    "\1\u0163\52\0\1\u01a1\107\0\1\u012d\74\0\1\u01a2\47\0"+
    "\1\u01a3\1\0\1\u01a4\1\0\1\u0167\3\0\1\u0167\5\0"+
    "\1\u01a5\1\0\1\u0167\52\0\1\u01a6\107\0\1\u0130\52\0"+
    "\1\u01a7\1\0\1\u01a8\1\0\1\u016a\3\0\1\u016a\5\0"+
    "\1\u01a9\1\0\1\u016a\51\0\1\u01aa\1\0\1\u01ab\1\0"+
    "\1\u016b\3\0\1\u016b\5\0\1\u01ac\1\0\1\u016b\50\0"+
    "\3\u01ad\1\u01ae\66\u01ad\26\0\2\u01af\75\0\1\u01b0\66\0"+
    "\1\u01b1\75\0\1\u01b2\66\0\1\u01b3\102\0\1\u01b4\63\0"+
    "\1\u01b5\70\0\1\u01b6\70\0\1\u01b7\71\0\1\u01b8\71\0"+
    "\1\u01b9\62\0\1\u01ba\100\0\1\u01bb\71\0\1\u01bc\62\0"+
    "\1\u01bd\100\0\1\u01be\62\0\1\u01bf\50\0\1\u01c0\107\0"+
    "\1\u014d\101\0\1\u01c1\74\0\1\u01c2\37\0\1\u01c3\1\0"+
    "\1\u01c4\1\0\1\u0188\3\0\1\u0188\5\0\1\u01c5\1\0"+
    "\1\u0188\73\0\1\u01c6\47\0\1\u01c7\1\0\1\u01c8\1\0"+
    "\1\u018a\3\0\1\u018a\5\0\1\u01c9\1\0\1\u018a\52\0"+
    "\1\u01ca\107\0\1\u0153\74\0\1\u01cb\47\0\1\u01cc\1\0"+
    "\1\u01cd\1\0\1\u018f\3\0\1\u018f\5\0\1\u01ce\1\0"+
    "\1\u018f\52\0\1\u01cf\107\0\1\u0156\52\0\1\u01d0\1\0"+
    "\1\u01d1\1\0\1\u0193\3\0\1\u0193\5\0\1\u01d2\1\0"+
    "\1\u0193\51\0\1\u01d3\1\0\1\u01d4\1\0\1\u0194\3\0"+
    "\1\u0194\5\0\1\u01d5\1\0\1\u0194\52\0\1\u01d6\107\0"+
    "\1\u0158\51\0\3\u01d7\1\u01d8\66\u01d7\3\u01d9\1\u01da\66\u01d9"+
    "\1\0\1\u01db\1\0\1\u01dc\1\0\1\u01dd\3\0\1\u01dd"+
    "\5\0\1\u01de\1\0\1\u01dd\1\u01df\77\0\1\u01e0\43\0"+
    "\1\u01e1\107\0\1\u0161\52\0\1\u01e2\3\0\1\u019e\3\0"+
    "\1\u019e\5\0\1\u01e3\1\0\1\u019e\52\0\1\u01e4\107\0"+
    "\1\u0163\51\0\3\u01e5\1\u01e6\66\u01e5\1\0\1\u01e7\1\0"+
    "\1\u01e8\1\0\1\u01a2\3\0\1\u01a2\5\0\1\u01e9\1\0"+
    "\1\u01a2\52\0\1\u01ea\107\0\1\u0167\51\0\3\u01eb\1\u01ec"+
    "\66\u01eb\2\0\1\u01ed\107\0\1\u016a\53\0\1\u01ee\107\0"+
    "\1\u016b\51\0\2\u01ad\1\u01ef\67\u01ad\2\0\1\u01f0\1\u01ae"+
    "\111\0\1\u01f1\101\0\1\u01f2\101\0\1\u01f3\51\0\1\u01f4"+
    "\104\0\1\u01f5\67\0\1\u01f6\60\0\1\u01f7\112\0\1\u01f8"+
    "\55\0\1\u01f9\105\0\1\u01fa\55\0\1\u01fb\41\0\3\u01fc"+
    "\1\u01fd\66\u01fc\1\0\1\u01fe\1\0\1\u01ff\1\0\1\u0200"+
    "\3\0\1\u0200\5\0\1\u0201\1\0\1\u0200\1\u0202\77\0"+
    "\1\u0203\43\0\1\u0204\107\0\1\u0188\52\0\1\u0205\1\0"+
    "\1\u0206\1\0\1\u01c6\3\0\1\u01c6\5\0\1\u0207\1\0"+
    "\1\u01c6\52\0\1\u0208\107\0\1\u018a\51\0\3\u0209\1\u020a"+
    "\66\u0209\1\0\1\u020b\1\0\1\u020c\1\0\1\u01cb\3\0"+
    "\1\u01cb\5\0\1\u020d\1\0\1\u01cb\52\0\1\u020e\107\0"+
    "\1\u018f\51\0\3\u020f\1\u0210\66\u020f\2\0\1\u0211\107\0"+
    "\1\u0193\53\0\1\u0212\107\0\1\u0194\51\0\3\u0213\1\u0214"+
    "\66\u0213\2\u01d7\1\u0215\67\u01d7\2\0\1\u0216\1\u01d8\66\0"+
    "\2\u01d9\1\u0217\67\u01d9\2\0\1\u0218\1\u01da\70\0\1\u0219"+
    "\70\0\1\u01db\1\0\1\u01dc\1\0\1\u01dd\3\0\1\u01dd"+
    "\5\0\1\u01de\1\0\1\u01dd\70\0\1\u01dd\52\0\1\u021a"+
    "\1\0\1\u021b\1\0\1\u01df\3\0\1\u01df\5\0\1\u021c"+
    "\1\0\1\u01df\51\0\1\u021d\1\0\1\u021e\1\0\1\u01e0"+
    "\3\0\1\u01e0\5\0\1\u021f\1\0\1\u01e0\50\0\3\u0220"+
    "\1\u0221\66\u0220\2\0\1\u0222\107\0\1\u019e\51\0\3\u0223"+
    "\1\u0224\66\u0223\2\u01e5\1\u0225\67\u01e5\2\0\1\u0226\1\u01e6"+
    "\70\0\1\u0227\107\0\1\u01a2\51\0\3\u0228\1\u0229\66\u0228"+
    "\2\u01eb\1\u022a\67\u01eb\2\0\1\u022b\1\u01ec\66\0\3\u022c"+
    "\1\u022d\66\u022c\3\u022e\1\u022f\66\u022e\2\u01ad\1\u01ef\1\375"+
    "\66\u01ad\3\0\1\375\132\0\1\u0230\55\0\1\u0231\73\0"+
    "\1\u0232\103\0\1\u0233\55\0\1\u0234\64\0\1\u0235\112\0"+
    "\1\u0236\53\0\2\u0237\64\0\1\u0238\75\0\2\u0239\64\0"+
    "\1\u023a\47\0\2\u01fc\1\u023b\67\u01fc\2\0\1\u023c\1\u01fd"+
    "\70\0\1\u023d\70\0\1\u01fe\1\0\1\u01ff\1\0\1\u0200"+
    "\3\0\1\u0200\5\0\1\u0201\1\0\1\u0200\70\0\1\u0200"+
    "\52\0\1\u023e\1\0\1\u023f\1\0\1\u0202\3\0\1\u0202"+
    "\5\0\1\u0240\1\0\1\u0202\51\0\1\u0241\1\0\1\u0242"+
    "\1\0\1\u0203\3\0\1\u0203\5\0\1\u0243\1\0\1\u0203"+
    "\50\0\3\u0244\1\u0245\66\u0244\2\0\1\u0246\107\0\1\u01c6"+
    "\51\0\3\u0247\1\u0248\66\u0247\2\u0209\1\u0249\67\u0209\2\0"+
    "\1\u024a\1\u020a\70\0\1\u024b\107\0\1\u01cb\51\0\3\u024c"+
    "\1\u024d\66\u024c\2\u020f\1\u024e\67\u020f\2\0\1\u024f\1\u0210"+
    "\66\0\3\u0250\1\u0251\66\u0250\3\u0252\1\u0253\66\u0252\2\u0213"+
    "\1\u0254\67\u0213\2\0\1\u0255\1\u0214\66\0\2\u01d7\1\u0215"+
    "\1\u0126\66\u01d7\3\0\1\u0126\66\0\2\u01d9\1\u0217\1\u0127"+
    "\66\u01d9\3\0\1\u0127\66\0\3\u0256\1\u0257\66\u0256\2\0"+
    "\1\u0258\107\0\1\u01df\53\0\1\u0259\107\0\1\u01e0\51\0"+
    "\2\u0220\1\u025a\67\u0220\2\0\1\u025b\1\u0221\66\0\3\u025c"+
    "\1\u025d\66\u025c\2\u0223\1\u025e\67\u0223\2\0\1\u025f\1\u0224"+
    "\66\0\2\u01e5\1\u0225\1\u012d\66\u01e5\3\0\1\u012d\66\0"+
    "\3\u0260\1\u0261\66\u0260\2\u0228\1\u0262\67\u0228\2\0\1\u0263"+
    "\1\u0229\66\0\2\u01eb\1\u022a\1\u0130\66\u01eb\3\0\1\u0130"+
    "\66\0\2\u022c\1\u0264\67\u022c\2\0\1\u0265\1\u022d\66\0"+
    "\2\u022e\1\u0266\67\u022e\2\0\1\u0267\1\u022f\127\0\1\u0268"+
    "\74\0\1\u0269\55\0\1\u026a\1\u026b\124\0\1\u026c\33\0"+
    "\2\u026d\126\0\1\u026e\33\0\2\u026f\42\0\2\u01fc\1\u023b"+
    "\1\u014d\66\u01fc\3\0\1\u014d\66\0\3\u0270\1\u0271\66\u0270"+
    "\2\0\1\u0272\107\0\1\u0202\53\0\1\u0273\107\0\1\u0203"+
    "\51\0\2\u0244\1\u0274\67\u0244\2\0\1\u0275\1\u0245\66\0"+
    "\3\u0276\1\u0277\66\u0276\2\u0247\1\u0278\67\u0247\2\0\1\u0279"+
    "\1\u0248\66\0\2\u0209\1\u0249\1\u0153\66\u0209\3\0\1\u0153"+
    "\66\0\3\u027a\1\u027b\66\u027a\2\u024c\1\u027c\67\u024c\2\0"+
    "\1\u027d\1\u024d\66\0\2\u020f\1\u024e\1\u0156\66\u020f\3\0"+
    "\1\u0156\66\0\2\u0250\1\u027e\67\u0250\2\0\1\u027f\1\u0251"+
    "\66\0\2\u0252\1\u0280\67\u0252\2\0\1\u0281\1\u0253\66\0"+
    "\2\u0213\1\u0254\1\u0158\66\u0213\3\0\1\u0158\66\0\2\u0256"+
    "\1\u0282\67\u0256\2\0\1\u0283\1\u0257\66\0\3\u0284\1\u0285"+
    "\66\u0284\3\u0286\1\u0287\66\u0286\2\u0220\1\u025a\1\u0161\66\u0220"+
    "\3\0\1\u0161\66\0\2\u025c\1\u0288\67\u025c\2\0\1\u0289"+
    "\1\u025d\66\0\2\u0223\1\u025e\1\u0163\66\u0223\3\0\1\u0163"+
    "\66\0\2\u0260\1\u028a\67\u0260\2\0\1\u028b\1\u0261\66\0"+
    "\2\u0228\1\u0262\1\u0167\66\u0228\3\0\1\u0167\66\0\2\u022c"+
    "\1\u0264\1\u016a\66\u022c\3\0\1\u016a\66\0\2\u022e\1\u0266"+
    "\1\u016b\66\u022e\3\0\1\u016b\111\0\1\u028c\71\0\1\u028d"+
    "\71\0\1\u028e\71\0\1\u028f\71\0\1\u0290\46\0\2\u0270"+
    "\1\u0291\67\u0270\2\0\1\u0292\1\u0271\66\0\3\u0293\1\u0294"+
    "\66\u0293\3\u0295\1\u0296\66\u0295\2\u0244\1\u0274\1\u0188\66\u0244"+
    "\3\0\1\u0188\66\0\2\u0276\1\u0297\67\u0276\2\0\1\u0298"+
    "\1\u0277\66\0\2\u0247\1\u0278\1\u018a\66\u0247\3\0\1\u018a"+
    "\66\0\2\u027a\1\u0299\67\u027a\2\0\1\u029a\1\u027b\66\0"+
    "\2\u024c\1\u027c\1\u018f\66\u024c\3\0\1\u018f\66\0\2\u0250"+
    "\1\u027e\1\u0193\66\u0250\3\0\1\u0193\66\0\2\u0252\1\u0280"+
    "\1\u0194\66\u0252\3\0\1\u0194\66\0\2\u0256\1\u0282\1\u01dd"+
    "\66\u0256\3\0\1\u01dd\66\0\2\u0284\1\u029b\67\u0284\2\0"+
    "\1\u029c\1\u0285\66\0\2\u0286\1\u029d\67\u0286\2\0\1\u029e"+
    "\1\u0287\66\0\2\u025c\1\u0288\1\u019e\66\u025c\3\0\1\u019e"+
    "\66\0\2\u0260\1\u028a\1\u01a2\66\u0260\3\0\1\u01a2\132\0"+
    "\1\u029f\71\0\1\u02a0\25\0\2\u0270\1\u0291\1\u0200\66\u0270"+
    "\3\0\1\u0200\66\0\2\u0293\1\u02a1\67\u0293\2\0\1\u02a2"+
    "\1\u0294\66\0\2\u0295\1\u02a3\67\u0295\2\0\1\u02a4\1\u0296"+
    "\66\0\2\u0276\1\u0297\1\u01c6\66\u0276\3\0\1\u01c6\66\0"+
    "\2\u027a\1\u0299\1\u01cb\66\u027a\3\0\1\u01cb\66\0\2\u0284"+
    "\1\u029b\1\u01df\66\u0284\3\0\1\u01df\66\0\2\u0286\1\u029d"+
    "\1\u01e0\66\u0286\3\0\1\u01e0\66\0\2\u0293\1\u02a1\1\u0202"+
    "\66\u0293\3\0\1\u0202\66\0\2\u0295\1\u02a3\1\u0203\66\u0295"+
    "\3\0\1\u0203\66\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[33582];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\1\1\2\11\2\1\2\11\2\1\1\11\2\1"+
    "\1\11\4\1\1\0\5\1\2\11\4\1\1\11\2\1"+
    "\1\11\14\1\10\11\3\1\2\11\16\0\1\11\5\0"+
    "\1\11\4\0\3\11\3\0\2\1\2\0\1\11\7\0"+
    "\1\11\2\0\3\11\44\0\1\1\2\0\1\1\47\0"+
    "\1\11\2\0\2\11\3\0\1\11\6\0\2\11\54\0"+
    "\1\11\1\0\4\11\47\0\1\1\2\0\1\1\2\0"+
    "\1\11\46\0\1\11\2\0\1\11\3\0\1\1\1\0"+
    "\1\1\21\0\1\11\1\0\1\11\1\0\1\11\3\0"+
    "\1\11\1\0\1\11\4\0\1\11\7\0\1\11\4\0"+
    "\1\11\4\0\1\11\7\0\1\1\5\0\1\11\3\0"+
    "\1\11\2\0\1\11\12\0\1\11\2\0\2\11\2\0"+
    "\3\11\4\0\1\11\3\0\1\11\4\0\1\11\3\0"+
    "\1\11\2\0\1\11\7\0\1\11\13\0\1\11\26\0"+
    "\1\11\6\0\1\11\5\0\1\11\16\0\1\11\2\0"+
    "\1\11\21\0\1\11\2\0\2\11\1\0\1\11\10\0"+
    "\1\11\2\0\1\11\46\0\3\11\40\0\2\11\1\0"+
    "\1\11\17\0\2\11\4\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[676];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public  LinkedList<Token> LexErr  = new LinkedList();
    public  LinkedList<Token> LexTok = new LinkedList();
    public String cadena = "";


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yypushback(yylength());
    yybegin(HTML);
            } 
            // fall through
          case 103: break;
          case 2: 
            { 
            } 
            // fall through
          case 104: break;
          case 3: 
            { yypushback(yylength());
        yybegin(YYINITIAL);
        
        if(cadena.length()>0){
            //System.out.println(cadena + ">" + cadena.length());
            LexTok.add(new Token("TEXTO PLANO",yycolumn,yyline,cadena));        
            return new Symbol(sym.PLAINTEXT,yycolumn,yyline,cadena);
        }
            } 
            // fall through
          case 105: break;
          case 4: 
            { cadena+= yytext().trim();
        //System.out.println(cadena + ">" + cadena.length());
            } 
            // fall through
          case 106: break;
          case 5: 
            { if (cadena.length()>0){
            String temp = cadena.substring(cadena.length() - 1, cadena.length());
            if(!temp.equals(" ") && !temp.equals("\n") && !temp.equals("\t") && !temp.equals("\f") && !temp.equals("\r")){
                cadena += " ";
                //System.out.println("Concatena espacios");
            }
        }
            } 
            // fall through
          case 107: break;
          case 6: 
            { LexTok.add(new Token("MAYOR_QUE",yycolumn,yyline,yytext()));
        cadena = "";
        yybegin(HTML);
        return new Symbol(sym.MAYOR_QUE,yycolumn,yyline,yytext());
            } 
            // fall through
          case 108: break;
          case 7: 
            { LexTok.add(new Token("IGUAL",yycolumn,yyline,yytext()));
        return new Symbol(sym.IGUAL,yycolumn,yyline,yytext());
            } 
            // fall through
          case 109: break;
          case 8: 
            { LexTok.add(new Token("ENTERO",yycolumn,yyline,yytext()));
        return new Symbol(sym.ENTERO, yycolumn, yyline, yytext());
            } 
            // fall through
          case 110: break;
          case 9: 
            { LexTok.add(new Token("IGUAL",yycolumn,yyline,yytext()));
        return new Symbol(sym.IGUAL, yycolumn, yyline, yytext());
            } 
            // fall through
          case 111: break;
          case 10: 
            { LexErr.add(new Token("Error léxico",yychar,yyline,yytext()));
            } 
            // fall through
          case 112: break;
          case 11: 
            { LexTok.add(new Token("MENOR_QUE",yycolumn,yyline,yytext()));
        return new Symbol(sym.MENOR_QUE,yycolumn,yyline,yytext());
            } 
            // fall through
          case 113: break;
          case 12: 
            { LexTok.add(new Token("NOT",yycolumn,yyline,yytext()));
        return new Symbol(sym.NOT,yycolumn,yyline,yytext());
            } 
            // fall through
          case 114: break;
          case 13: 
            { LexTok.add(new Token("MAYOR_QUE",yycolumn,yyline,yytext()));
        return new Symbol(sym.MAYOR_QUE,yycolumn,yyline,yytext());
            } 
            // fall through
          case 115: break;
          case 14: 
            { LexTok.add(new Token("DIVISION",yycolumn,yyline,yytext()));
        return new Symbol(sym.DIVISION,yycolumn,yyline,yytext());
            } 
            // fall through
          case 116: break;
          case 15: 
            { LexTok.add(new Token("PRODUCTO",yycolumn,yyline,yytext()));
        return new Symbol(sym.PRODUCTO,yycolumn,yyline,yytext());
            } 
            // fall through
          case 117: break;
          case 16: 
            { LexTok.add(new Token("DOT",yycolumn,yyline,yytext()));
        return new Symbol(sym.DOT,yycolumn,yyline,yytext());
            } 
            // fall through
          case 118: break;
          case 17: 
            { LexTok.add(new Token("MAS",yycolumn,yyline,yytext()));
        return new Symbol(sym.MAS,yycolumn,yyline,yytext());
            } 
            // fall through
          case 119: break;
          case 18: 
            { LexTok.add(new Token("MENOS",yycolumn,yyline,yytext()));
        return new Symbol(sym.MENOS,yycolumn,yyline,yytext());
            } 
            // fall through
          case 120: break;
          case 19: 
            { LexTok.add(new Token("PARIZQ",yycolumn,yyline,yytext()));
        return new Symbol(sym.PARIZQ,yycolumn,yyline,yytext());
            } 
            // fall through
          case 121: break;
          case 20: 
            { LexTok.add(new Token("PARDER",yycolumn,yyline,yytext()));
        return new Symbol(sym.PARDER,yycolumn,yyline,yytext());
            } 
            // fall through
          case 122: break;
          case 21: 
            { LexTok.add(new Token("LLVIZQ",yycolumn,yyline,yytext()));
        return new Symbol(sym.LLVIZQ,yycolumn,yyline,yytext());
            } 
            // fall through
          case 123: break;
          case 22: 
            { LexTok.add(new Token("LLVDER",yycolumn,yyline,yytext()));
        return new Symbol(sym.LLVDER,yycolumn,yyline,yytext());
            } 
            // fall through
          case 124: break;
          case 23: 
            { LexTok.add(new Token("CORIZQ",yycolumn,yyline,yytext()));
        return new Symbol(sym.CORIZQ,yycolumn,yyline,yytext());
            } 
            // fall through
          case 125: break;
          case 24: 
            { LexTok.add(new Token("CORDER",yycolumn,yyline,yytext()));
        return new Symbol(sym.CORDER,yycolumn,yyline,yytext());
            } 
            // fall through
          case 126: break;
          case 25: 
            { LexTok.add(new Token("SEMICOLON",yycolumn,yyline,yytext()));
        return new Symbol(sym.SEMICOLON,yycolumn,yyline,yytext());
            } 
            // fall through
          case 127: break;
          case 26: 
            { LexTok.add(new Token("COMMA",yycolumn,yyline,yytext()));
        return new Symbol(sym.COMMA,yycolumn,yyline,yytext());
            } 
            // fall through
          case 128: break;
          case 27: 
            { LexTok.add(new Token("CADENA",yycolumn,yyline,yytext().substring(1,yylength()-1)));
        return new Symbol(sym.CADENA, yycolumn,yyline,yytext().substring(1,yylength()-1));
            } 
            // fall through
          case 129: break;
          case 28: 
            { LexTok.add(new Token("ID",yycolumn,yyline,yytext()));
        return new Symbol(sym.ID,yycolumn,yyline,yytext());
            } 
            // fall through
          case 130: break;
          case 29: 
            { LexTok.add(new Token("MENOR_QUE_IGUAL",yycolumn,yyline,yytext()));
        return new Symbol(sym.MENOR_QUE_IGUAL,yycolumn,yyline,yytext());
            } 
            // fall through
          case 131: break;
          case 30: 
            { LexTok.add(new Token("DIFERENTE",yycolumn,yyline,yytext()));
        return new Symbol(sym.DIFERENTE,yycolumn,yyline,yytext());
            } 
            // fall through
          case 132: break;
          case 31: 
            { LexTok.add(new Token("MAYOR_QUE_IGUAL",yycolumn,yyline,yytext()));
        return new Symbol(sym.MAYOR_QUE_IGUAL,yycolumn,yyline,yytext());
            } 
            // fall through
          case 133: break;
          case 32: 
            { LexTok.add(new Token("IDENTIFICADOR",yycolumn,yyline,yytext()));
        return new Symbol(sym.IDENTIFICADOR, yycolumn, yyline, yytext());
            } 
            // fall through
          case 134: break;
          case 33: 
            { LexTok.add(new Token("ESTRUCTURA",yycolumn,yyline,yytext()));
        return new Symbol(sym.ESTRUCTURA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 135: break;
          case 34: 
            { LexTok.add(new Token("IF",yycolumn,yyline,yytext()));
        return new Symbol(sym.IF, yycolumn, yyline, yytext());
            } 
            // fall through
          case 136: break;
          case 35: 
            { LexTok.add(new Token("HSCRIPT_FINAL",yycolumn,yyline,yytext()));
        cadena="";
        yybegin(HTML);
        return new Symbol(sym.HSCRIPT_FINAL,yycolumn,yyline,yytext());
            } 
            // fall through
          case 137: break;
          case 36: 
            { LexTok.add(new Token("AND",yycolumn,yyline,yytext()));
        return new Symbol(sym.AND,yycolumn,yyline,yytext());
            } 
            // fall through
          case 138: break;
          case 37: 
            { LexTok.add(new Token("OR",yycolumn,yyline,yytext()));
        return new Symbol(sym.OR,yycolumn,yyline,yytext());
            } 
            // fall through
          case 139: break;
          case 38: 
            { LexTok.add(new Token("IGUAL_IGUAL",yycolumn,yyline,yytext()));
        return new Symbol(sym.IGUAL_IGUAL,yycolumn,yyline,yytext());
            } 
            // fall through
          case 140: break;
          case 39: 
            { LexTok.add(new Token("DECIMAL",yycolumn,yyline,yytext()));
        return new Symbol(sym.DECIMAL, yycolumn, yyline, yytext());
            } 
            // fall through
          case 141: break;
          case 40: 
            { LexTok.add(new Token("HSCRIPT_INICIO",yycolumn,yyline,yytext()));
    yybegin(HSCRIPT); 
    return new Symbol(sym.HSCRIPT_INICIO,yycolumn,yyline,yytext());
            } 
            // fall through
          case 142: break;
          case 41: 
            { LexTok.add(new Token("PATH",yycolumn,yyline,yytext()));
        return new Symbol(sym.PATH,yycolumn,yyline,yytext());
            } 
            // fall through
          case 143: break;
          case 42: 
            { LexTok.add(new Token("ALTO",yycolumn,yyline,yytext()));
        return new Symbol(sym.ALTO,yycolumn,yyline,yytext());
            } 
            // fall through
          case 144: break;
          case 43: 
            { LexTok.add(new Token("VERDADERO",yycolumn,yyline,yytext()));
        return new Symbol(sym.VERDADERO,yycolumn,yyline,yytext());
            } 
            // fall through
          case 145: break;
          case 44: 
            { LexTok.add(new Token("ECHO",yycolumn,yyline,yytext()));
        return new Symbol(sym.ECHO, yycolumn, yyline, yytext());
            } 
            // fall through
          case 146: break;
          case 45: 
            { LexTok.add(new Token("ELSE",yycolumn,yyline,yytext()));
        return new Symbol(sym.ELSE, yycolumn, yyline, yytext());
            } 
            // fall through
          case 147: break;
          case 46: 
            { LexTok.add(new Token("FONDO",yycolumn,yyline,yytext()));
        return new Symbol(sym.FONDO,yycolumn,yyline,yytext());
            } 
            // fall through
          case 148: break;
          case 47: 
            { LexTok.add(new Token("ANCHO",yycolumn,yyline,yytext()));
        return new Symbol(sym.ANCHO,yycolumn,yyline,yytext());
            } 
            // fall through
          case 149: break;
          case 48: 
            { LexTok.add(new Token("TEXTO",yycolumn,yyline,yytext()));
        return new Symbol(sym.TEXTO, yycolumn, yyline, yytext());
            } 
            // fall through
          case 150: break;
          case 49: 
            { LexTok.add(new Token("BORDE",yycolumn,yyline,yytext()));
        return new Symbol(sym.BORDE,yycolumn,yyline,yytext());
            } 
            // fall through
          case 151: break;
          case 50: 
            { LexTok.add(new Token("FALSO",yycolumn,yyline,yytext()));
        return new Symbol(sym.FALSO,yycolumn,yyline,yytext());
            } 
            // fall through
          case 152: break;
          case 51: 
            { LexTok.add(new Token("BOTON_INICIO",yycolumn,yyline,yytext()));
    yybegin(BOTON);
    return new Symbol(sym.BOTON_INICIO,yycolumn,yyline,yytext());
            } 
            // fall through
          case 153: break;
          case 52: 
            { LexTok.add(new Token("TABLA_INICIO",yycolumn,yyline,yytext()));
    yybegin(TABLA);
    return new Symbol(sym.TABLA_INICIO,yycolumn,yyline,yytext());
            } 
            // fall through
          case 154: break;
          case 53: 
            { LexTok.add(new Token("FILA_INICIO",yycolumn,yyline,yytext()));
    cadena="";
    yybegin(HTML);
    return new Symbol(sym.FILA_INICIO,yycolumn,yyline,yytext());
            } 
            // fall through
          case 155: break;
          case 54: 
            { LexTok.add(new Token("FILA_FINAL",yycolumn,yyline,yytext()));
    cadena="";
    yybegin(HTML);
    return new Symbol(sym.FILA_FINAL,yycolumn,yyline,yytext());
            } 
            // fall through
          case 156: break;
          case 55: 
            { LexTok.add(new Token("COMPI_INICIO",yycolumn,yyline,yytext()));
    cadena = "";
    yybegin(HTML);
    return new Symbol(sym.COMPI_INICIO,yycolumn,yyline,yytext());
            } 
            // fall through
          case 157: break;
          case 56: 
            { LexTok.add(new Token("CUERPO_INICIO",yycolumn,yyline,yytext()));
    yybegin(CUERPO);
    return new Symbol(sym.CUERPO_INICIO,yycolumn,yyline,yytext());
            } 
            // fall through
          case 158: break;
          case 57: 
            { LexTok.add(new Token("IMAGEN_INICIO",yycolumn,yyline,yytext()));
    yybegin(IMAGEN);
    return new Symbol(sym.IMAGEN_INICIO,yycolumn,yyline,yytext());
            } 
            // fall through
          case 159: break;
          case 58: 
            { LexTok.add(new Token("REPETIR",yycolumn,yyline,yytext()));
        return new Symbol(sym.REPETIR, yycolumn, yyline, yytext());
            } 
            // fall through
          case 160: break;
          case 59: 
            { LexTok.add(new Token("SETPATH",yycolumn,yyline,yytext()));
        return new Symbol(sym.SETPATH, yycolumn, yyline, yytext());
            } 
            // fall through
          case 161: break;
          case 60: 
            { LexTok.add(new Token("SETALTO",yycolumn,yyline,yytext()));
        return new Symbol(sym.SETALTO, yycolumn, yyline, yytext());
            } 
            // fall through
          case 162: break;
          case 61: 
            { LexTok.add(new Token("GETPATH",yycolumn,yyline,yytext()));
        return new Symbol(sym.GETPATH, yycolumn, yyline, yytext());
            } 
            // fall through
          case 163: break;
          case 62: 
            { LexTok.add(new Token("GETALTO",yycolumn,yyline,yytext()));
        return new Symbol(sym.GETALTO, yycolumn, yyline, yytext());
            } 
            // fall through
          case 164: break;
          case 63: 
            { LexTok.add(new Token("COMPI_FINAL",yycolumn,yyline,yytext()));
    cadena = "";
    yybegin(HTML);
    return new Symbol(sym.COMPI_FINAL,yycolumn,yyline,yytext());
            } 
            // fall through
          case 165: break;
          case 64: 
            { LexTok.add(new Token("BOTON_FINAL",yycolumn,yyline,yytext()));
    cadena="";
    yybegin(HTML);
    return new Symbol(sym.BOTON_FINAL,yycolumn,yyline,yytext());
            } 
            // fall through
          case 166: break;
          case 65: 
            { LexTok.add(new Token("TABLA_FINAL",yycolumn,yyline,yytext()));
    cadena="";
    yybegin(HTML);
    return new Symbol(sym.TABLA_FINAL,yycolumn,yyline,yytext());
            } 
            // fall through
          case 167: break;
          case 66: 
            { LexTok.add(new Token("SALTO",yycolumn,yyline,yytext()));
    return new Symbol(sym.SALTO,yycolumn,yyline,yytext());
            } 
            // fall through
          case 168: break;
          case 67: 
            { LexTok.add(new Token("PARRAFO_INICIO",yycolumn,yyline,yytext()));
    yybegin(PARRAFO);
    return new Symbol(sym.PARRAFO_INICIO,yycolumn,yyline,yytext());
            } 
            // fall through
          case 169: break;
          case 68: 
            { LexTok.add(new Token("TITULO_INICIO",yycolumn,yyline,yytext()));
    cadena = "";
    yybegin(HTML);
    return new Symbol(sym.TITULO_INICIO,yycolumn,yyline,yytext());
            } 
            // fall through
          case 170: break;
          case 69: 
            { LexTok.add(new Token("TEXTOA_INICIO",yycolumn,yyline,yytext()));
    cadena="";
    yybegin(HTML);
    return new Symbol(sym.TEXTOA_INICIO,yycolumn,yyline,yytext());
            } 
            // fall through
          case 171: break;
          case 70: 
            { LexTok.add(new Token("TEXTOB_INICIO",yycolumn,yyline,yytext()));
    cadena="";
    yybegin(HTML);
    return new Symbol(sym.TEXTOB_INICIO,yycolumn,yyline,yytext());
            } 
            // fall through
          case 172: break;
          case 71: 
            { LexTok.add(new Token("INSERTAR",yycolumn,yyline,yytext()));
        return new Symbol(sym.INSERTAR, yycolumn, yyline, yytext());
            } 
            // fall through
          case 173: break;
          case 72: 
            { LexTok.add(new Token("SETBORDE",yycolumn,yyline,yytext()));
        return new Symbol(sym.SETBORDE, yycolumn, yyline, yytext());
            } 
            // fall through
          case 174: break;
          case 73: 
            { LexTok.add(new Token("SETTEXTO",yycolumn,yyline,yytext()));
        return new Symbol(sym.SETTEXTO, yycolumn, yyline, yytext());
            } 
            // fall through
          case 175: break;
          case 74: 
            { LexTok.add(new Token("GETANCHO",yycolumn,yyline,yytext()));
        return new Symbol(sym.GETANCHO, yycolumn, yyline, yytext());
            } 
            // fall through
          case 176: break;
          case 75: 
            { LexTok.add(new Token("GETBORDE",yycolumn,yyline,yytext()));
        return new Symbol(sym.GETBORDE, yycolumn, yyline, yytext());
            } 
            // fall through
          case 177: break;
          case 76: 
            { LexTok.add(new Token("GETTEXTO",yycolumn,yyline,yytext()));
        return new Symbol(sym.GETTEXTO, yycolumn, yyline, yytext());
            } 
            // fall through
          case 178: break;
          case 77: 
            { LexTok.add(new Token("CUERPO_FINAL",yycolumn,yyline,yytext()));
    cadena = "";
    yybegin(HTML);
    return new Symbol(sym.CUERPO_FINAL,yycolumn,yyline,yytext());
            } 
            // fall through
          case 179: break;
          case 78: 
            { LexTok.add(new Token("IMAGEN_FINAL",yycolumn,yyline,yytext()));
    cadena="";
    yybegin(HTML);
    return new Symbol(sym.IMAGEN_FINAL,yycolumn,yyline,yytext());
            } 
            // fall through
          case 180: break;
          case 79: 
            { LexTok.add(new Token("TITULO_FINAL",yycolumn,yyline,yytext()));
    cadena = "";
    yybegin(HTML);
    return new Symbol(sym.TITULO_FINAL,yycolumn,yyline,yytext());
            } 
            // fall through
          case 181: break;
          case 80: 
            { LexTok.add(new Token("TEXTOA_FINAL",yycolumn,yyline,yytext()));
    cadena="";
    yybegin(HTML);
    return new Symbol(sym.TEXTOA_FINAL,yycolumn,yyline,yytext());
            } 
            // fall through
          case 182: break;
          case 81: 
            { LexTok.add(new Token("TEXTOB_FINAL",yycolumn,yyline,yytext()));
    cadena="";
    yybegin(HTML);
    return new Symbol(sym.TEXTOB_FINAL,yycolumn,yyline,yytext());
            } 
            // fall through
          case 183: break;
          case 82: 
            { LexTok.add(new Token("COLUMNA_INICIO",yycolumn,yyline,yytext()));
    cadena="";
    yybegin(HTML);
    return new Symbol(sym.COLUMNA_INICIO,yycolumn,yyline,yytext());
            } 
            // fall through
          case 184: break;
          case 83: 
            { LexTok.add(new Token("ESPACIO_INICIO",yycolumn,yyline,yytext()));
    cadena="";
    yybegin(HTML);
    return new Symbol(sym.ESPACIO_INICIO,yycolumn,yyline,yytext());
            } 
            // fall through
          case 185: break;
          case 84: 
            { LexTok.add(new Token("COLUMNA_FINAL",yycolumn,yyline,yytext()));
    cadena="";
    yybegin(HTML);
    return new Symbol(sym.COLUMNA_FINAL,yycolumn,yyline,yytext());
            } 
            // fall through
          case 186: break;
          case 85: 
            { LexTok.add(new Token("PARRAFO_FINAL",yycolumn,yyline,yytext()));
    cadena="";
    yybegin(HTML);
    return new Symbol(sym.PARRAFO_FINAL,yycolumn,yyline,yytext());
            } 
            // fall through
          case 187: break;
          case 86: 
            { LexTok.add(new Token("ESPACIO_FINAL",yycolumn,yyline,yytext()));
    cadena="";
    yybegin(HTML);
    return new Symbol(sym.ESPACIO_FINAL,yycolumn,yyline,yytext());
            } 
            // fall through
          case 188: break;
          case 87: 
            { LexTok.add(new Token("COLUMNAC_INICIO",yycolumn,yyline,yytext()));
    cadena="";
    yybegin(HTML);
    return new Symbol(sym.COLUMNAC_INICIO,yycolumn,yyline,yytext());
            } 
            // fall through
          case 189: break;
          case 88: 
            { LexTok.add(new Token("CABEZA_INICIO",yycolumn,yyline,yytext()));
    cadena = "";
    yybegin(HTML);
    return new Symbol(sym.CABEZA_INICIO,yycolumn,yyline,yytext());
            } 
            // fall through
          case 190: break;
          case 89: 
            { LexTok.add(new Token("ALINEACION",yycolumn,yyline,yytext()));
        return new Symbol(sym.ALINEACION,yycolumn,yyline,yytext());
            } 
            // fall through
          case 191: break;
          case 90: 
            { LexTok.add(new Token("CREARBOTON",yycolumn,yyline,yytext()));
        return new Symbol(sym.CREARBOTON, yycolumn, yyline, yytext());
            } 
            // fall through
          case 192: break;
          case 91: 
            { LexTok.add(new Token("CREARTABLA",yycolumn,yyline,yytext()));
        return new Symbol(sym.CREARTABLA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 193: break;
          case 92: 
            { LexTok.add(new Token("CLICKBOTON",yycolumn,yyline,yytext()));
        return new Symbol(sym.CLICKBOTON, yycolumn, yyline, yytext());
            } 
            // fall through
          case 194: break;
          case 93: 
            { LexTok.add(new Token("COLUMNAC_FINAL",yycolumn,yyline,yytext()));
    cadena="";
    yybegin(HTML);
    return new Symbol(sym.COLUMNAC_FINAL,yycolumn,yyline,yytext());
            } 
            // fall through
          case 195: break;
          case 94: 
            { LexTok.add(new Token("CABEZA_FINAL",yycolumn,yyline,yytext()));
    cadena = "";
    yybegin(HTML);
    return new Symbol(sym.CABEZA_FINAL,yycolumn,yyline,yytext());
            } 
            // fall through
          case 196: break;
          case 95: 
            { LexTok.add(new Token("CREARIMAGEN",yycolumn,yyline,yytext()));
        return new Symbol(sym.CREARIMAGEN, yycolumn, yyline, yytext());
            } 
            // fall through
          case 197: break;
          case 96: 
            { LexTok.add(new Token("CREARTEXTOA",yycolumn,yyline,yytext()));
        return new Symbol(sym.CREARTEXTOA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 198: break;
          case 97: 
            { LexTok.add(new Token("CREARTEXTOB",yycolumn,yyline,yytext()));
        return new Symbol(sym.CREARTEXTOB, yycolumn, yyline, yytext());
            } 
            // fall through
          case 199: break;
          case 98: 
            { LexTok.add(new Token("CREARPARRAFO",yycolumn,yyline,yytext()));
        return new Symbol(sym.CREARPARRAFO, yycolumn, yyline, yytext());
            } 
            // fall through
          case 200: break;
          case 99: 
            { LexTok.add(new Token("SETCONTENIDO",yycolumn,yyline,yytext()));
        return new Symbol(sym.SETCONTENIDO, yycolumn, yyline, yytext());
            } 
            // fall through
          case 201: break;
          case 100: 
            { LexTok.add(new Token("GETCONTENIDO",yycolumn,yyline,yytext()));
        return new Symbol(sym.GETCONTENIDO, yycolumn, yyline, yytext());
            } 
            // fall through
          case 202: break;
          case 101: 
            { LexTok.add(new Token("SETALINEACION",yycolumn,yyline,yytext()));
        return new Symbol(sym.SETALINEACION, yycolumn, yyline, yytext());
            } 
            // fall through
          case 203: break;
          case 102: 
            { LexTok.add(new Token("GETALINEACION",yycolumn,yyline,yytext()));
        return new Symbol(sym.GETALINEACION, yycolumn, yyline, yytext());
            } 
            // fall through
          case 204: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
