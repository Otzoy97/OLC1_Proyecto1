/* The following code was generated by JFlex 1.7.0 */

//Paquete
package analyzer;
//Import
import java_cup.runtime.Symbol;
import java.util.LinkedList;
//Lista

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>scanner.jflex</tt>
 */
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int HTML = 2;
  public static final int CUERPO = 4;
  public static final int PARRAFO = 6;
  public static final int IMAGEN = 8;
  public static final int BOTON = 10;
  public static final int TABLA = 12;
  public static final int HSCRIPT = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7, 7
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
    40, 40, 40, 40, 40, 40, 40, 40, 40, 17,  9, 10, 11,  5, 40, 40, 
    40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 
    18,  2,  8, 16, 14, 40, 49, 40, 43, 44,  6, 41, 54, 42, 53,  3, 
     7,  7,  7,  7,  7,  7,  7,  7,  7,  7, 40, 52,  1, 51,  4, 38, 
    40, 25, 26, 19, 55, 27, 34, 36, 39, 24, 13, 57, 31, 21, 37, 20, 
    22, 13, 28, 33, 29, 30, 13, 13, 35, 13, 13, 47, 40, 48, 40, 15, 
    40, 25, 26, 19, 55, 27, 34, 36, 39, 24, 13, 57, 31, 21, 37, 20, 
    22, 13, 28, 33, 29, 30, 13, 13, 35, 13, 13, 45, 50, 46, 40, 40, 
    40, 40, 40, 40, 40, 10, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 
    40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 
    40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 
    40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 
    40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 
    40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 
    40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 
    40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\2\1\1\2\1\1\2\3\1\4\1\3\1\1"+
    "\1\5\2\1\1\6\1\1\1\7\2\1\1\0\5\1"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\7"+
    "\13\11\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\2\11\1\6\1\27\1\30\1\31\16\0\1\32"+
    "\5\0\1\33\4\0\1\34\1\35\2\0\1\36\2\0"+
    "\1\37\1\40\1\41\2\0\1\42\7\0\1\43\2\0"+
    "\1\44\1\45\1\46\43\0\1\2\2\0\1\47\45\0"+
    "\1\50\2\0\1\51\1\52\3\0\1\53\5\0\1\54"+
    "\1\55\52\0\1\56\1\0\1\57\1\60\1\61\6\0"+
    "\1\62\6\0\1\63\31\0\1\64\2\0\1\65\2\0"+
    "\1\66\45\0\1\67\2\0\1\70\3\0\1\71\1\0"+
    "\1\72\21\0\1\73\1\0\1\74\1\0\1\75\3\0"+
    "\1\76\1\0\1\77\4\0\1\100\7\0\1\101\4\0"+
    "\1\102\4\0\1\103\7\0\1\104\5\0\1\105\3\0"+
    "\1\106\2\0\1\107\11\0\1\110\2\0\1\111\1\112"+
    "\2\0\1\113\1\114\1\115\4\0\1\116\3\0\1\117"+
    "\4\0\1\120\3\0\1\121\2\0\1\122\5\0\1\123"+
    "\12\0\1\124\23\0\1\125\6\0\1\126\4\0\1\127"+
    "\12\0\1\130\2\0\1\131\12\0\1\132\2\0\1\133"+
    "\1\134\1\0\1\135\7\0\1\136\2\0\1\137\26\0"+
    "\1\140\1\141\1\142\23\0\1\143\1\144\1\0\1\145"+
    "\10\0\1\146\1\147\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[610];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0196"+
    "\0\u01d0\0\u020a\0\u020a\0\u0244\0\u027e\0\u020a\0\u020a\0\u02b8"+
    "\0\u027e\0\u020a\0\u02f2\0\u032c\0\u020a\0\u0366\0\u03a0\0\u03da"+
    "\0\u0414\0\u044e\0\u044e\0\u0488\0\u04c2\0\u04fc\0\u0536\0\u020a"+
    "\0\u020a\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u020a\0\u0658\0\u0692"+
    "\0\u06cc\0\u0706\0\u0244\0\u0740\0\u077a\0\u07b4\0\u07ee\0\u0828"+
    "\0\u0862\0\u089c\0\u020a\0\u020a\0\u020a\0\u020a\0\u020a\0\u020a"+
    "\0\u020a\0\u020a\0\u08d6\0\u0910\0\u094a\0\u020a\0\u020a\0\u020a"+
    "\0\u0984\0\u09be\0\u09f8\0\u0a32\0\u0a6c\0\u0aa6\0\u0ae0\0\u0b1a"+
    "\0\u0b54\0\u0b8e\0\u0bc8\0\u0c02\0\u0c3c\0\u02f2\0\u020a\0\u0c76"+
    "\0\u0cb0\0\u0cea\0\u0d24\0\u0d5e\0\u020a\0\u0d98\0\u0dd2\0\u0e0c"+
    "\0\u0e46\0\u020a\0\u020a\0\u0e80\0\u0eba\0\u020a\0\u0ef4\0\u0692"+
    "\0\u020a\0\u0f2e\0\u0f68\0\u0fa2\0\u0fdc\0\u020a\0\u1016\0\u1050"+
    "\0\u108a\0\u10c4\0\u10fe\0\u1138\0\u1172\0\u020a\0\u089c\0\u11ac"+
    "\0\u020a\0\u020a\0\u020a\0\u11e6\0\u1220\0\u125a\0\u1294\0\u12ce"+
    "\0\u1308\0\u1342\0\u137c\0\u13b6\0\u13f0\0\u142a\0\u1464\0\u149e"+
    "\0\u14d8\0\u1512\0\u154c\0\u1586\0\u15c0\0\u15fa\0\u1634\0\u166e"+
    "\0\u16a8\0\u16e2\0\u171c\0\u1756\0\u1790\0\u17ca\0\u1804\0\u183e"+
    "\0\u1878\0\u18b2\0\u18ec\0\u1926\0\u1960\0\u199a\0\u0e80\0\u19d4"+
    "\0\u1a0e\0\u0ef4\0\u1a48\0\u1a82\0\u1abc\0\u1af6\0\u1b30\0\u1b6a"+
    "\0\u1ba4\0\u1bde\0\u1c18\0\u1c52\0\u1c8c\0\u1cc6\0\u1d00\0\u1d3a"+
    "\0\u1d74\0\u1dae\0\u1de8\0\u1e22\0\u1e5c\0\u1e96\0\u1ed0\0\u1f0a"+
    "\0\u1f44\0\u1f7e\0\u1fb8\0\u1ff2\0\u202c\0\u2066\0\u20a0\0\u20da"+
    "\0\u2114\0\u214e\0\u2188\0\u21c2\0\u21fc\0\u2236\0\u2270\0\u020a"+
    "\0\u22aa\0\u22e4\0\u020a\0\u020a\0\u231e\0\u2358\0\u2392\0\u020a"+
    "\0\u23cc\0\u2406\0\u2440\0\u247a\0\u24b4\0\u020a\0\u020a\0\u24ee"+
    "\0\u2528\0\u2562\0\u259c\0\u25d6\0\u2610\0\u264a\0\u2684\0\u26be"+
    "\0\u26f8\0\u2732\0\u276c\0\u27a6\0\u27e0\0\u281a\0\u2854\0\u288e"+
    "\0\u28c8\0\u2902\0\u293c\0\u2976\0\u29b0\0\u29ea\0\u2a24\0\u2a5e"+
    "\0\u2a98\0\u2ad2\0\u2b0c\0\u2b46\0\u2b80\0\u2bba\0\u2bf4\0\u2c2e"+
    "\0\u2c68\0\u2ca2\0\u2cdc\0\u2d16\0\u2d50\0\u2d8a\0\u2dc4\0\u2dfe"+
    "\0\u2e38\0\u020a\0\u2e72\0\u020a\0\u020a\0\u020a\0\u2eac\0\u2ee6"+
    "\0\u2f20\0\u2f5a\0\u2f94\0\u2fce\0\u020a\0\u3008\0\u3042\0\u307c"+
    "\0\u30b6\0\u30f0\0\u312a\0\u020a\0\u3164\0\u319e\0\u31d8\0\u3212"+
    "\0\u324c\0\u3286\0\u32c0\0\u32fa\0\u3334\0\u336e\0\u33a8\0\u33e2"+
    "\0\u341c\0\u3456\0\u3490\0\u34ca\0\u3504\0\u353e\0\u3578\0\u35b2"+
    "\0\u35ec\0\u3626\0\u3660\0\u369a\0\u36d4\0\u370e\0\u3748\0\u3782"+
    "\0\u37bc\0\u37f6\0\u3830\0\u020a\0\u386a\0\u38a4\0\u38de\0\u3918"+
    "\0\u3952\0\u398c\0\u39c6\0\u3a00\0\u3a3a\0\u3a74\0\u3aae\0\u3ae8"+
    "\0\u3b22\0\u3b5c\0\u3b96\0\u3bd0\0\u3c0a\0\u3c44\0\u3c7e\0\u3cb8"+
    "\0\u3cf2\0\u3d2c\0\u3d66\0\u3da0\0\u3dda\0\u3e14\0\u3e4e\0\u3e88"+
    "\0\u3ec2\0\u3efc\0\u3f36\0\u3f70\0\u3faa\0\u3fe4\0\u401e\0\u4058"+
    "\0\u4092\0\u020a\0\u40cc\0\u4106\0\u020a\0\u4140\0\u417a\0\u41b4"+
    "\0\u41ee\0\u4228\0\u4262\0\u429c\0\u42d6\0\u4310\0\u434a\0\u4384"+
    "\0\u43be\0\u43f8\0\u4432\0\u446c\0\u44a6\0\u44e0\0\u451a\0\u4554"+
    "\0\u458e\0\u45c8\0\u4602\0\u463c\0\u020a\0\u4676\0\u020a\0\u46b0"+
    "\0\u020a\0\u46ea\0\u4724\0\u475e\0\u020a\0\u4798\0\u020a\0\u47d2"+
    "\0\u480c\0\u4846\0\u4880\0\u020a\0\u48ba\0\u48f4\0\u492e\0\u4968"+
    "\0\u49a2\0\u49dc\0\u4a16\0\u020a\0\u4a50\0\u4a8a\0\u4ac4\0\u4afe"+
    "\0\u020a\0\u4b38\0\u4b72\0\u4bac\0\u4be6\0\u020a\0\u4c20\0\u4c5a"+
    "\0\u4c94\0\u4cce\0\u4d08\0\u4d42\0\u4d7c\0\u4db6\0\u4df0\0\u4e2a"+
    "\0\u4e64\0\u4e9e\0\u4ed8\0\u020a\0\u4f12\0\u4f4c\0\u4f86\0\u020a"+
    "\0\u4fc0\0\u4ffa\0\u020a\0\u5034\0\u506e\0\u50a8\0\u50e2\0\u511c"+
    "\0\u5156\0\u5190\0\u51ca\0\u5204\0\u020a\0\u523e\0\u5278\0\u020a"+
    "\0\u020a\0\u52b2\0\u52ec\0\u020a\0\u020a\0\u020a\0\u5326\0\u5360"+
    "\0\u539a\0\u53d4\0\u020a\0\u540e\0\u5448\0\u5482\0\u020a\0\u54bc"+
    "\0\u54f6\0\u5530\0\u556a\0\u020a\0\u55a4\0\u55de\0\u5618\0\u020a"+
    "\0\u5652\0\u568c\0\u020a\0\u56c6\0\u5700\0\u573a\0\u5774\0\u57ae"+
    "\0\u020a\0\u57e8\0\u5822\0\u585c\0\u5896\0\u58d0\0\u590a\0\u5944"+
    "\0\u597e\0\u59b8\0\u59f2\0\u020a\0\u5a2c\0\u5a66\0\u5aa0\0\u5ada"+
    "\0\u5b14\0\u5b4e\0\u5b88\0\u5bc2\0\u5bfc\0\u5c36\0\u5c70\0\u5caa"+
    "\0\u5ce4\0\u5d1e\0\u5d58\0\u5d92\0\u5dcc\0\u5e06\0\u5e40\0\u020a"+
    "\0\u5e7a\0\u5eb4\0\u5eee\0\u5f28\0\u5f62\0\u5f9c\0\u020a\0\u5fd6"+
    "\0\u6010\0\u604a\0\u6084\0\u020a\0\u60be\0\u60f8\0\u6132\0\u616c"+
    "\0\u61a6\0\u61e0\0\u621a\0\u6254\0\u628e\0\u62c8\0\u020a\0\u6302"+
    "\0\u633c\0\u020a\0\u6376\0\u63b0\0\u63ea\0\u6424\0\u645e\0\u6498"+
    "\0\u64d2\0\u650c\0\u6546\0\u6580\0\u020a\0\u65ba\0\u65f4\0\u020a"+
    "\0\u020a\0\u662e\0\u020a\0\u6668\0\u66a2\0\u66dc\0\u6716\0\u6750"+
    "\0\u678a\0\u67c4\0\u020a\0\u67fe\0\u6838\0\u020a\0\u6872\0\u68ac"+
    "\0\u68e6\0\u6920\0\u695a\0\u6994\0\u69ce\0\u6a08\0\u6a42\0\u6a7c"+
    "\0\u6ab6\0\u6af0\0\u6b2a\0\u6b64\0\u6b9e\0\u6bd8\0\u6c12\0\u6c4c"+
    "\0\u6c86\0\u6cc0\0\u6cfa\0\u6d34\0\u020a\0\u020a\0\u020a\0\u6d6e"+
    "\0\u6da8\0\u6de2\0\u6e1c\0\u6e56\0\u6e90\0\u6eca\0\u6f04\0\u6f3e"+
    "\0\u6f78\0\u6fb2\0\u6fec\0\u7026\0\u7060\0\u709a\0\u70d4\0\u710e"+
    "\0\u7148\0\u7182\0\u020a\0\u020a\0\u71bc\0\u020a\0\u71f6\0\u7230"+
    "\0\u726a\0\u72a4\0\u72de\0\u7318\0\u7352\0\u738c\0\u020a\0\u020a"+
    "\0\u73c6\0\u7400";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[610];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\11\3\12\1\13\3\12\1\13\2\12\1\0"+
    "\4\12\1\14\1\13\4\12\1\0\10\12\1\0\27\12"+
    "\1\0\1\12\1\0\1\15\3\16\1\17\3\16\1\17"+
    "\2\16\1\0\4\16\1\20\1\17\4\16\1\0\10\16"+
    "\1\0\27\16\1\0\1\16\1\0\1\21\2\12\1\22"+
    "\1\13\2\12\1\23\1\13\2\12\1\0\4\12\1\14"+
    "\1\13\4\12\1\0\10\12\1\0\1\12\1\24\20\12"+
    "\1\25\4\12\1\0\1\12\1\0\1\21\2\12\1\22"+
    "\1\13\2\12\1\23\1\13\2\12\1\0\4\12\1\14"+
    "\1\13\4\12\1\0\1\12\1\26\6\12\1\0\22\12"+
    "\1\25\4\12\1\0\1\12\1\0\1\21\2\12\1\22"+
    "\1\13\1\12\1\27\1\23\1\13\2\12\1\0\4\12"+
    "\1\14\1\13\3\12\1\30\1\0\1\12\1\31\6\12"+
    "\1\0\22\12\1\25\4\12\1\0\1\12\1\0\1\21"+
    "\2\12\1\22\1\13\2\12\1\23\1\13\2\12\1\0"+
    "\4\12\1\14\1\13\4\12\1\32\1\33\4\12\1\34"+
    "\2\12\1\0\22\12\1\25\4\12\1\0\1\12\1\0"+
    "\1\21\2\12\1\22\1\13\3\12\1\13\2\12\1\0"+
    "\4\12\1\14\1\13\4\12\1\0\2\12\1\35\2\12"+
    "\1\36\2\12\1\0\1\12\1\37\20\12\1\40\4\12"+
    "\1\0\1\12\1\41\1\42\1\43\1\44\1\45\1\13"+
    "\1\46\1\47\1\50\1\13\2\12\1\0\1\41\1\51"+
    "\1\41\1\52\1\53\1\13\1\54\3\41\2\55\2\41"+
    "\1\56\1\57\3\41\2\60\2\41\1\61\1\41\1\62"+
    "\2\41\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\1\75\1\76\1\77\1\100\3\41"+
    "\1\0\1\101\1\102\1\103\1\0\1\104\3\0\1\104"+
    "\7\0\1\105\1\104\1\106\2\0\1\107\2\110\1\0"+
    "\1\111\1\112\1\0\1\113\4\0\1\114\3\0\1\115"+
    "\130\0\1\13\60\0\1\102\102\0\1\17\56\0\10\116"+
    "\2\117\60\116\24\0\1\120\104\0\1\121\41\0\1\27"+
    "\113\0\1\122\77\0\1\123\5\0\1\124\113\0\1\125"+
    "\35\0\1\126\62\0\1\127\101\0\1\130\66\0\1\131"+
    "\123\0\1\132\71\0\1\133\11\0\1\134\2\0\1\135"+
    "\146\0\1\136\6\0\5\137\1\0\1\137\1\47\1\137"+
    "\4\0\55\137\10\140\2\141\60\140\15\0\1\142\5\0"+
    "\4\142\1\0\10\142\1\0\5\142\1\0\1\142\17\0"+
    "\1\142\1\0\1\142\15\0\1\143\5\0\4\143\1\0"+
    "\10\143\1\0\5\143\1\0\1\143\17\0\1\143\1\0"+
    "\1\143\34\0\1\144\2\0\1\145\74\0\1\146\2\0"+
    "\1\147\47\0\1\150\13\0\1\151\65\0\1\152\71\0"+
    "\1\153\71\0\1\154\37\0\1\155\2\0\1\156\1\157"+
    "\3\0\1\157\7\0\1\160\1\157\130\0\1\161\72\0"+
    "\1\162\72\0\1\163\10\0\1\164\67\0\3\165\1\0"+
    "\66\165\1\0\1\166\3\0\1\103\3\0\1\103\7\0"+
    "\1\167\1\103\1\170\2\0\1\171\2\172\1\0\1\173"+
    "\1\174\1\0\1\175\2\0\2\176\1\177\30\0\1\101"+
    "\1\0\1\103\1\0\1\104\3\0\1\104\7\0\1\105"+
    "\1\104\1\106\2\0\1\107\2\110\1\0\1\111\1\112"+
    "\1\0\1\113\4\0\1\114\3\0\1\115\36\0\1\104"+
    "\102\0\1\200\4\0\1\201\4\0\1\202\64\0\1\203"+
    "\65\0\1\204\70\0\1\205\105\0\2\206\57\0\2\207"+
    "\1\210\1\0\1\211\65\0\2\212\42\0\1\213\3\0"+
    "\1\115\3\0\1\115\7\0\1\214\1\115\24\0\1\215"+
    "\67\0\1\216\53\0\2\217\76\0\1\220\71\0\1\221"+
    "\57\0\1\222\111\0\1\223\62\0\1\224\73\0\1\225"+
    "\72\0\1\226\32\0\5\227\1\0\3\227\1\0\60\227"+
    "\3\230\1\231\66\230\7\0\1\232\71\0\1\142\5\0"+
    "\1\142\1\0\1\142\3\0\4\142\1\0\10\142\1\0"+
    "\5\142\1\0\1\142\17\0\1\142\1\0\1\142\7\0"+
    "\1\143\5\0\1\143\1\0\1\143\3\0\4\143\1\0"+
    "\10\143\1\0\5\143\1\0\1\143\17\0\1\143\1\0"+
    "\1\143\33\0\1\233\65\0\2\234\101\0\2\235\77\0"+
    "\1\236\62\0\2\237\56\0\1\240\100\0\1\241\71\0"+
    "\1\242\36\0\1\243\102\0\1\157\56\0\3\244\1\0"+
    "\66\244\2\165\1\245\67\165\2\0\1\246\102\0\1\103"+
    "\102\0\1\247\4\0\1\250\4\0\1\251\64\0\1\252"+
    "\65\0\1\253\70\0\1\254\105\0\2\255\57\0\2\256"+
    "\1\257\1\0\1\260\67\0\1\261\67\0\2\262\66\0"+
    "\1\263\11\0\1\264\64\0\1\265\72\0\1\266\72\0"+
    "\1\267\66\0\1\270\75\0\1\271\62\0\1\272\100\0"+
    "\1\273\66\0\1\274\102\0\1\275\65\0\1\276\34\0"+
    "\1\277\102\0\1\115\116\0\2\300\117\0\1\301\47\0"+
    "\1\302\73\0\1\303\46\0\1\304\114\0\1\305\57\0"+
    "\1\306\123\0\1\307\35\0\1\310\76\0\2\225\30\0"+
    "\6\230\1\311\63\230\3\0\1\231\2\0\1\312\114\0"+
    "\1\313\63\0\1\314\101\0\1\315\62\0\1\316\100\0"+
    "\1\317\71\0\1\320\61\0\1\321\2\0\1\322\2\323"+
    "\1\324\1\325\2\0\1\326\57\0\1\327\2\0\1\330"+
    "\2\331\1\332\1\333\2\0\1\334\34\0\3\335\1\0"+
    "\66\335\2\244\1\336\67\244\2\165\1\245\1\165\1\13"+
    "\65\165\3\337\1\0\66\337\25\0\1\340\11\0\1\341"+
    "\64\0\1\342\72\0\1\343\72\0\1\344\66\0\1\345"+
    "\75\0\1\346\62\0\1\347\100\0\1\350\66\0\1\351"+
    "\102\0\1\352\65\0\1\353\71\0\1\354\60\0\1\355"+
    "\101\0\1\356\66\0\1\357\72\0\1\360\71\0\1\361"+
    "\101\0\1\362\51\0\1\363\76\0\1\364\76\0\1\365"+
    "\72\0\1\366\67\0\1\367\65\0\1\370\40\0\3\371"+
    "\1\0\66\371\24\0\1\372\100\0\1\373\62\0\1\374"+
    "\71\0\1\375\100\0\1\376\36\0\3\230\1\13\2\230"+
    "\1\311\63\230\3\0\1\13\122\0\1\377\125\0\2\u0100"+
    "\34\0\1\u0101\72\0\1\u0102\60\0\1\u0103\76\0\1\u0104"+
    "\127\0\1\u0105\41\0\1\u0106\5\0\1\u0107\50\0\1\u0108"+
    "\100\0\1\u0109\62\0\1\u010a\76\0\1\u010b\127\0\1\u010c"+
    "\41\0\1\u010d\5\0\1\u010e\50\0\1\u010f\100\0\1\u0110"+
    "\36\0\2\335\1\u0111\67\335\2\244\1\336\1\244\1\104"+
    "\65\244\2\337\1\u0112\67\337\26\0\1\u0113\101\0\1\u0114"+
    "\66\0\1\u0115\72\0\1\u0116\71\0\1\u0117\101\0\1\u0118"+
    "\51\0\1\u0119\76\0\1\u011a\76\0\1\u011b\72\0\1\u011c"+
    "\67\0\1\u011d\71\0\1\u011e\65\0\1\u011f\67\0\2\u0120"+
    "\66\0\1\u0121\67\0\1\u0122\74\0\1\u0123\74\0\1\u0124"+
    "\73\0\1\u0125\103\0\1\u0126\47\0\1\u0127\105\0\1\u0128"+
    "\63\0\1\u0129\64\0\1\u012a\46\0\1\u012b\2\0\1\u012c"+
    "\1\370\3\0\1\370\7\0\1\u012d\1\370\47\0\2\371"+
    "\1\u012e\67\371\31\0\1\u012f\66\0\1\u0130\2\u0131\1\0"+
    "\1\u0132\2\0\1\u0133\66\0\1\u0134\74\0\1\u0135\63\0"+
    "\2\u0136\106\0\1\u0137\61\0\1\u0138\63\0\2\u0139\4\0"+
    "\1\u013a\57\0\1\u013b\102\0\1\u013c\100\0\1\u013d\73\0"+
    "\1\u013e\61\0\1\u013f\63\0\2\u0140\4\0\1\u0141\57\0"+
    "\1\u0142\102\0\1\u0143\100\0\1\u0144\26\0\2\335\1\u0111"+
    "\1\335\1\157\65\335\2\337\1\u0112\1\337\1\103\65\337"+
    "\27\0\2\u0145\66\0\1\u0146\67\0\1\u0147\74\0\1\u0148"+
    "\74\0\1\u0149\73\0\1\u014a\103\0\1\u014b\47\0\1\u014c"+
    "\105\0\1\u014d\63\0\1\u014e\64\0\1\u014f\71\0\1\u0150"+
    "\46\0\1\u0151\2\0\1\u0152\1\u011f\3\0\1\u011f\7\0"+
    "\1\u0153\1\u011f\50\0\1\u0154\2\0\1\u0155\1\u0120\3\0"+
    "\1\u0120\7\0\1\u0156\1\u0120\114\0\1\u0157\57\0\1\u0158"+
    "\62\0\1\u0159\107\0\1\u015a\74\0\1\u015b\25\0\1\u015c"+
    "\3\0\1\u0126\3\0\1\u0126\7\0\1\u015d\1\u0126\76\0"+
    "\2\u015e\65\0\1\u015f\46\0\1\u0160\3\0\1\u0129\3\0"+
    "\1\u0129\7\0\1\u0161\1\u0129\100\0\1\u0162\1\u0163\41\0"+
    "\1\u0164\102\0\1\370\56\0\2\371\1\u012e\1\371\1\115"+
    "\65\371\23\0\1\u0165\77\0\1\u0166\65\0\1\u0167\70\0"+
    "\1\u0168\76\0\1\u0169\1\0\1\u016a\62\0\1\u016b\76\0"+
    "\1\u016c\74\0\1\u016d\72\0\1\u016e\103\0\1\u016f\67\0"+
    "\1\u0170\50\0\1\u0171\114\0\1\u013a\111\0\1\u0172\37\0"+
    "\1\u0173\71\0\1\u0174\103\0\1\u0175\67\0\1\u0176\50\0"+
    "\1\u0177\114\0\1\u0178\111\0\1\u0179\37\0\1\u017a\35\0"+
    "\1\u017b\2\0\1\u017c\1\u0145\3\0\1\u0145\7\0\1\u017d"+
    "\1\u0145\114\0\1\u017e\57\0\1\u017f\62\0\1\u0180\107\0"+
    "\1\u0181\74\0\1\u0182\25\0\1\u0183\2\0\1\u0184\1\u014b"+
    "\3\0\1\u014b\7\0\1\u0185\1\u014b\76\0\2\u0186\65\0"+
    "\1\u0187\46\0\1\u0188\2\0\1\u0189\1\u014e\3\0\1\u014e"+
    "\7\0\1\u018a\1\u014e\100\0\1\u018b\1\u018c\40\0\1\u018d"+
    "\2\0\1\u018e\1\u0150\3\0\1\u0150\7\0\1\u018f\1\u0150"+
    "\51\0\1\u0190\102\0\1\u011f\60\0\1\u0191\102\0\1\u0120"+
    "\107\0\1\u0192\74\0\1\u0193\36\0\1\u0194\3\0\1\u0159"+
    "\3\0\1\u0159\7\0\1\u0195\1\u0159\73\0\1\u0196\46\0"+
    "\1\u0197\3\0\1\u015b\3\0\1\u015b\7\0\1\u0198\1\u015b"+
    "\51\0\1\u0199\102\0\1\u0126\102\0\1\u019a\46\0\1\u019b"+
    "\2\0\1\u019c\1\u015f\3\0\1\u015f\7\0\1\u019d\1\u015f"+
    "\51\0\1\u019e\102\0\1\u0129\57\0\1\u019f\2\0\1\u01a0"+
    "\1\u0162\3\0\1\u0162\7\0\1\u01a1\1\u0162\50\0\1\u01a2"+
    "\2\0\1\u01a3\1\u0163\3\0\1\u0163\7\0\1\u01a4\1\u0163"+
    "\47\0\3\u01a5\1\0\66\u01a5\27\0\2\u01a6\75\0\1\u01a7"+
    "\66\0\1\u01a8\75\0\1\u01a9\66\0\1\u01aa\102\0\1\u01ab"+
    "\63\0\1\u01ac\70\0\1\u01ad\70\0\1\u01ae\71\0\1\u01af"+
    "\71\0\1\u01b0\62\0\1\u01b1\100\0\1\u01b2\71\0\1\u01b3"+
    "\62\0\1\u01b4\100\0\1\u01b5\62\0\1\u01b6\47\0\1\u01b7"+
    "\102\0\1\u0145\107\0\1\u01b8\74\0\1\u01b9\36\0\1\u01ba"+
    "\2\0\1\u01bb\1\u0180\3\0\1\u0180\7\0\1\u01bc\1\u0180"+
    "\73\0\1\u01bd\46\0\1\u01be\2\0\1\u01bf\1\u0182\3\0"+
    "\1\u0182\7\0\1\u01c0\1\u0182\51\0\1\u01c1\102\0\1\u014b"+
    "\102\0\1\u01c2\46\0\1\u01c3\2\0\1\u01c4\1\u0187\3\0"+
    "\1\u0187\7\0\1\u01c5\1\u0187\51\0\1\u01c6\102\0\1\u014e"+
    "\57\0\1\u01c7\2\0\1\u01c8\1\u018b\3\0\1\u018b\7\0"+
    "\1\u01c9\1\u018b\50\0\1\u01ca\2\0\1\u01cb\1\u018c\3\0"+
    "\1\u018c\7\0\1\u01cc\1\u018c\51\0\1\u01cd\102\0\1\u0150"+
    "\56\0\3\u01ce\1\0\66\u01ce\3\u01cf\1\0\66\u01cf\1\0"+
    "\1\u01d0\2\0\1\u01d1\1\u01d2\3\0\1\u01d2\7\0\1\u01d3"+
    "\1\u01d2\1\u01d4\77\0\1\u01d5\42\0\1\u01d6\102\0\1\u0159"+
    "\57\0\1\u01d7\3\0\1\u0196\3\0\1\u0196\7\0\1\u01d8"+
    "\1\u0196\51\0\1\u01d9\102\0\1\u015b\56\0\3\u01da\1\0"+
    "\66\u01da\1\0\1\u01db\2\0\1\u01dc\1\u019a\3\0\1\u019a"+
    "\7\0\1\u01dd\1\u019a\51\0\1\u01de\102\0\1\u015f\56\0"+
    "\3\u01df\1\0\66\u01df\2\0\1\u01e0\102\0\1\u0162\60\0"+
    "\1\u01e1\102\0\1\u0163\56\0\2\u01a5\1\u01e2\67\u01a5\24\0"+
    "\1\u01e3\101\0\1\u01e4\101\0\1\u01e5\51\0\1\u01e6\104\0"+
    "\1\u01e7\67\0\1\u01e8\60\0\1\u01e9\112\0\1\u01ea\55\0"+
    "\1\u01eb\105\0\1\u01ec\55\0\1\u01ed\40\0\3\u01ee\1\0"+
    "\66\u01ee\1\0\1\u01ef\2\0\1\u01f0\1\u01f1\3\0\1\u01f1"+
    "\7\0\1\u01f2\1\u01f1\1\u01f3\77\0\1\u01f4\42\0\1\u01f5"+
    "\102\0\1\u0180\57\0\1\u01f6\2\0\1\u01f7\1\u01bd\3\0"+
    "\1\u01bd\7\0\1\u01f8\1\u01bd\51\0\1\u01f9\102\0\1\u0182"+
    "\56\0\3\u01fa\1\0\66\u01fa\1\0\1\u01fb\2\0\1\u01fc"+
    "\1\u01c2\3\0\1\u01c2\7\0\1\u01fd\1\u01c2\51\0\1\u01fe"+
    "\102\0\1\u0187\56\0\3\u01ff\1\0\66\u01ff\2\0\1\u0200"+
    "\102\0\1\u018b\60\0\1\u0201\102\0\1\u018c\56\0\3\u0202"+
    "\1\0\66\u0202\2\u01ce\1\u0203\67\u01ce\2\u01cf\1\u0204\67\u01cf"+
    "\2\0\1\u0205\70\0\1\u01d0\2\0\1\u01d1\1\u01d2\3\0"+
    "\1\u01d2\7\0\1\u01d3\1\u01d2\62\0\1\u01d2\57\0\1\u0206"+
    "\2\0\1\u0207\1\u01d4\3\0\1\u01d4\7\0\1\u0208\1\u01d4"+
    "\50\0\1\u0209\2\0\1\u020a\1\u01d5\3\0\1\u01d5\7\0"+
    "\1\u020b\1\u01d5\47\0\3\u020c\1\0\66\u020c\2\0\1\u020d"+
    "\102\0\1\u0196\56\0\3\u020e\1\0\66\u020e\2\u01da\1\u020f"+
    "\67\u01da\2\0\1\u0210\102\0\1\u019a\56\0\3\u0211\1\0"+
    "\66\u0211\2\u01df\1\u0212\67\u01df\3\u0213\1\0\66\u0213\3\u0214"+
    "\1\0\66\u0214\2\u01a5\1\u01e2\1\u01a5\1\370\65\u01a5\45\0"+
    "\1\u0215\55\0\1\u0216\73\0\1\u0217\103\0\1\u0218\55\0"+
    "\1\u0219\64\0\1\u021a\112\0\1\u021b\53\0\2\u021c\64\0"+
    "\1\u021d\75\0\2\u021e\64\0\1\u021f\46\0\2\u01ee\1\u0220"+
    "\67\u01ee\2\0\1\u0221\70\0\1\u01ef\2\0\1\u01f0\1\u01f1"+
    "\3\0\1\u01f1\7\0\1\u01f2\1\u01f1\62\0\1\u01f1\57\0"+
    "\1\u0222\2\0\1\u0223\1\u01f3\3\0\1\u01f3\7\0\1\u0224"+
    "\1\u01f3\50\0\1\u0225\2\0\1\u0226\1\u01f4\3\0\1\u01f4"+
    "\7\0\1\u0227\1\u01f4\47\0\3\u0228\1\0\66\u0228\2\0"+
    "\1\u0229\102\0\1\u01bd\56\0\3\u022a\1\0\66\u022a\2\u01fa"+
    "\1\u022b\67\u01fa\2\0\1\u022c\102\0\1\u01c2\56\0\3\u022d"+
    "\1\0\66\u022d\2\u01ff\1\u022e\67\u01ff\3\u022f\1\0\66\u022f"+
    "\3\u0230\1\0\66\u0230\2\u0202\1\u0231\67\u0202\2\u01ce\1\u0203"+
    "\1\u01ce\1\u011f\65\u01ce\2\u01cf\1\u0204\1\u01cf\1\u0120\65\u01cf"+
    "\3\u0232\1\0\66\u0232\2\0\1\u0233\102\0\1\u01d4\60\0"+
    "\1\u0234\102\0\1\u01d5\56\0\2\u020c\1\u0235\67\u020c\3\u0236"+
    "\1\0\66\u0236\2\u020e\1\u0237\67\u020e\2\u01da\1\u020f\1\u01da"+
    "\1\u0126\65\u01da\3\u0238\1\0\66\u0238\2\u0211\1\u0239\67\u0211"+
    "\2\u01df\1\u0212\1\u01df\1\u0129\65\u01df\2\u0213\1\u023a\67\u0213"+
    "\2\u0214\1\u023b\67\u0214\42\0\1\u023c\74\0\1\u023d\55\0"+
    "\1\u023e\1\u023f\126\0\1\u0240\31\0\2\u0241\130\0\1\u0242"+
    "\31\0\2\u0243\41\0\2\u01ee\1\u0220\1\u01ee\1\u0145\65\u01ee"+
    "\3\u0244\1\0\66\u0244\2\0\1\u0245\102\0\1\u01f3\60\0"+
    "\1\u0246\102\0\1\u01f4\56\0\2\u0228\1\u0247\67\u0228\3\u0248"+
    "\1\0\66\u0248\2\u022a\1\u0249\67\u022a\2\u01fa\1\u022b\1\u01fa"+
    "\1\u014b\65\u01fa\3\u024a\1\0\66\u024a\2\u022d\1\u024b\67\u022d"+
    "\2\u01ff\1\u022e\1\u01ff\1\u014e\65\u01ff\2\u022f\1\u024c\67\u022f"+
    "\2\u0230\1\u024d\67\u0230\2\u0202\1\u0231\1\u0202\1\u0150\65\u0202"+
    "\2\u0232\1\u024e\67\u0232\3\u024f\1\0\66\u024f\3\u0250\1\0"+
    "\66\u0250\2\u020c\1\u0235\1\u020c\1\u0159\65\u020c\2\u0236\1\u0251"+
    "\67\u0236\2\u020e\1\u0237\1\u020e\1\u015b\65\u020e\2\u0238\1\u0252"+
    "\67\u0238\2\u0211\1\u0239\1\u0211\1\u015f\65\u0211\2\u0213\1\u023a"+
    "\1\u0213\1\u0162\65\u0213\2\u0214\1\u023b\1\u0214\1\u0163\65\u0214"+
    "\24\0\1\u0253\71\0\1\u0254\71\0\1\u0255\71\0\1\u0256"+
    "\71\0\1\u0257\45\0\2\u0244\1\u0258\67\u0244\3\u0259\1\0"+
    "\66\u0259\3\u025a\1\0\66\u025a\2\u0228\1\u0247\1\u0228\1\u0180"+
    "\65\u0228\2\u0248\1\u025b\67\u0248\2\u022a\1\u0249\1\u022a\1\u0182"+
    "\65\u022a\2\u024a\1\u025c\67\u024a\2\u022d\1\u024b\1\u022d\1\u0187"+
    "\65\u022d\2\u022f\1\u024c\1\u022f\1\u018b\65\u022f\2\u0230\1\u024d"+
    "\1\u0230\1\u018c\65\u0230\2\u0232\1\u024e\1\u0232\1\u01d2\65\u0232"+
    "\2\u024f\1\u025d\67\u024f\2\u0250\1\u025e\67\u0250\2\u0236\1\u0251"+
    "\1\u0236\1\u0196\65\u0236\2\u0238\1\u0252\1\u0238\1\u019a\65\u0238"+
    "\45\0\1\u025f\71\0\1\u0260\24\0\2\u0244\1\u0258\1\u0244"+
    "\1\u01f1\65\u0244\2\u0259\1\u0261\67\u0259\2\u025a\1\u0262\67\u025a"+
    "\2\u0248\1\u025b\1\u0248\1\u01bd\65\u0248\2\u024a\1\u025c\1\u024a"+
    "\1\u01c2\65\u024a\2\u024f\1\u025d\1\u024f\1\u01d4\65\u024f\2\u0250"+
    "\1\u025e\1\u0250\1\u01d5\65\u0250\2\u0259\1\u0261\1\u0259\1\u01f3"+
    "\65\u0259\2\u025a\1\u0262\1\u025a\1\u01f4\65\u025a";

  private static int [] zzUnpackTrans() {
    int [] result = new int[29754];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\1\1\2\11\2\1\2\11\2\1\1\11\2\1"+
    "\1\11\4\1\1\0\5\1\2\11\4\1\1\11\14\1"+
    "\10\11\3\1\3\11\16\0\1\11\5\0\1\11\4\0"+
    "\2\11\2\0\1\11\2\0\1\11\2\1\2\0\1\11"+
    "\7\0\1\11\2\0\3\11\43\0\1\1\2\0\1\1"+
    "\45\0\1\11\2\0\2\11\3\0\1\11\5\0\2\11"+
    "\52\0\1\11\1\0\3\11\6\0\1\11\6\0\1\11"+
    "\31\0\1\1\2\0\1\1\2\0\1\11\45\0\1\11"+
    "\2\0\1\11\3\0\1\1\1\0\1\1\21\0\1\11"+
    "\1\0\1\11\1\0\1\11\3\0\1\11\1\0\1\11"+
    "\4\0\1\11\7\0\1\11\4\0\1\11\4\0\1\11"+
    "\7\0\1\1\5\0\1\11\3\0\1\11\2\0\1\11"+
    "\11\0\1\11\2\0\2\11\2\0\3\11\4\0\1\11"+
    "\3\0\1\11\4\0\1\11\3\0\1\11\2\0\1\11"+
    "\5\0\1\11\12\0\1\11\23\0\1\11\6\0\1\11"+
    "\4\0\1\11\12\0\1\11\2\0\1\11\12\0\1\11"+
    "\2\0\2\11\1\0\1\11\7\0\1\11\2\0\1\11"+
    "\26\0\3\11\23\0\2\11\1\0\1\11\10\0\2\11"+
    "\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[610];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public LinkedList<Token> LexErr  = new LinkedList();
    public LinkedList<Token> LexTok = new LinkedList();
    public String cadena = "";


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { cadena += yytext();
    yybegin(HTML);
            } 
            // fall through
          case 104: break;
          case 2: 
            { 
            } 
            // fall through
          case 105: break;
          case 3: 
            { if(yytext().equals("<")){
            yypushback(1);
            yybegin(YYINITIAL);
            LexTok.add(new Token("TEXTO PLANO",yycolumn,yyline,cadena));        
            return new Sym(sym.PLAINTEXT,yycolumn,yyline,cadena);
        } else {
            cadena += yytext();
        }
            } 
            // fall through
          case 106: break;
          case 4: 
            { String temp = cadena.substring(cadena.length-1);
        if(!temp.equals(" ") && !temp.equals("\n") && !temp.equals("\t") && !temp.equals("\f") && !temp.equals("\r")){
            cadena += " ";
        }
            } 
            // fall through
          case 107: break;
          case 5: 
            { LexTok.add(new Token("MAYOR_QUE",yycolumn,yyline,yytext()));
        cadena = "";
        yybegin(HTML);
        return new Symbol(sym.MAYOR_QUE,yycolumn,yyline,yytext());
            } 
            // fall through
          case 108: break;
          case 6: 
            { LexTok.add(new Token("IGUAL",yycolumn,yyline,yytext()));
        return new Symbol(sym.IGUAL,yycolumn,yyline,yytext());
            } 
            // fall through
          case 109: break;
          case 7: 
            { LexTok.add(new Token("ENTERO",yycolumn,yyline,yytext()));
        return new Symbol(sym.ENTERO, yycolumn, yyline, yytext());
            } 
            // fall through
          case 110: break;
          case 8: 
            { LexTok.add(new Token("IGUAL",yycolumn,yyline,yytext()));
        return new Symbol(sym.IGUAL, yycolumn, yyline, yytext());
            } 
            // fall through
          case 111: break;
          case 9: 
            { LexErr.add(new Token("Error léxico",yychar,yyline,yytext()));
            } 
            // fall through
          case 112: break;
          case 10: 
            { LexTok.add(new Token("MENOR_QUE",yycolumn,yyline,yytext()));
        return new Symbol(sym.MENOR_QUE,yycolumn,yyline,yytext());
            } 
            // fall through
          case 113: break;
          case 11: 
            { LexTok.add(new Token("NOT",yycolumn,yyline,yytext()));
        return new Symbol(sym.NOT,yycolumn,yyline,yytext());
            } 
            // fall through
          case 114: break;
          case 12: 
            { LexTok.add(new Token("DIVISION",yycolumn,yyline,yytext()));
        return new Symbol(sym.DIVISION,yycolumn,yyline,yytext());
            } 
            // fall through
          case 115: break;
          case 13: 
            { LexTok.add(new Token("MAYOR_QUE",yycolumn,yyline,yytext()));
        return new Symbol(sym.MAYOR_QUE,yycolumn,yyline,yytext());
            } 
            // fall through
          case 116: break;
          case 14: 
            { LexTok.add(new Token("PRODUCTO",yycolumn,yyline,yytext()));
        return new Symbol(sym.PRODUCTO,yycolumn,yyline,yytext());
            } 
            // fall through
          case 117: break;
          case 15: 
            { LexTok.add(new Token("MAS",yycolumn,yyline,yytext()));
        return new Symbol(sym.MAS,yycolumn,yyline,yytext());
            } 
            // fall through
          case 118: break;
          case 16: 
            { LexTok.add(new Token("MENOS",yycolumn,yyline,yytext()));
        return new Symbol(sym.MENOS,yycolumn,yyline,yytext());
            } 
            // fall through
          case 119: break;
          case 17: 
            { LexTok.add(new Token("PARDER",yycolumn,yyline,yytext()));
        return new Symbol(sym.PARDER,yycolumn,yyline,yytext());
            } 
            // fall through
          case 120: break;
          case 18: 
            { LexTok.add(new Token("PARIZQ",yycolumn,yyline,yytext()));
        return new Symbol(sym.PARIZQ,yycolumn,yyline,yytext());
            } 
            // fall through
          case 121: break;
          case 19: 
            { LexTok.add(new Token("LLVDER",yycolumn,yyline,yytext()));
        return new Symbol(sym.LLVDER,yycolumn,yyline,yytext());
            } 
            // fall through
          case 122: break;
          case 20: 
            { LexTok.add(new Token("LLVIZQ",yycolumn,yyline,yytext()));
        return new Symbol(sym.LLVIZQ,yycolumn,yyline,yytext());
            } 
            // fall through
          case 123: break;
          case 21: 
            { LexTok.add(new Token("CORDER",yycolumn,yyline,yytext()));
        return new Symbol(sym.CORDER,yycolumn,yyline,yytext());
            } 
            // fall through
          case 124: break;
          case 22: 
            { LexTok.add(new Token("CORIZQ",yycolumn,yyline,yytext()));
        return new Symbol(sym.CORIZQ,yycolumn,yyline,yytext());
            } 
            // fall through
          case 125: break;
          case 23: 
            { LexTok.add(new Token("SEMICOLON",yycolumn,yyline,yytext()));
        return new Symbol(sym.SEMICOLON,yycolumn,yyline,yytext());
            } 
            // fall through
          case 126: break;
          case 24: 
            { LexTok.add(new Token("DOT",yycolumn,yyline,yytext()));
        return new Symbol(sym.DOT,yycolumn,yyline,yytext());
            } 
            // fall through
          case 127: break;
          case 25: 
            { LexTok.add(new Token("COMMA",yycolumn,yyline,yytext()));
        return new Symbol(sym.COMMA,yycolumn,yyline,yytext());
            } 
            // fall through
          case 128: break;
          case 26: 
            { LexTok.add(new Token("CADENA",yycolumn,yyline,yytext()));
        return new Symbol(sym.CADENA,yycolumn,yyline,yytext());
            } 
            // fall through
          case 129: break;
          case 27: 
            { LexTok.add(new Token("ID",yycolumn,yyline,yytext()));
        return new Symbol(sym.ID,yycolumn,yyline,yytext());
            } 
            // fall through
          case 130: break;
          case 28: 
            { LexTok.add(new Token("MENOR_QUE_IGUAL",yycolumn,yyline,yytext()));
        return new Symbol(sym.MENOR_QUE_IGUAL,yycolumn,yyline,yytext());
            } 
            // fall through
          case 131: break;
          case 29: 
            { LexTok.add(new Token("DIFERENTE",yycolumn,yyline,yytext()));
        return new Symbol(sym.DIFERENTE,yycolumn,yyline,yytext());
            } 
            // fall through
          case 132: break;
          case 30: 
            { LexTok.add(new Token("MAYOR_QUE_IGUAL",yycolumn,yyline,yytext()));
        return new Symbol(sym.MAYOR_QUE_IGUAL,yycolumn,yyline,yytext());
            } 
            // fall through
          case 133: break;
          case 31: 
            { LexTok.add(new Token("CADENA",yycolumn,yyline,yytext()));
        return new Symbol(sym.CADENA, yycolumn,yyline,yytext());
            } 
            // fall through
          case 134: break;
          case 32: 
            { LexTok.add(new Token("IDENTIFICADOR",yycolumn,yyline,yytext()));
        return new Symbol(sym.IDENTIFICADOR, yycolumn, yyline, yytext());
            } 
            // fall through
          case 135: break;
          case 33: 
            { LexTok.add(new Token("ESTRUCTURA",yycolumn,yyline,yytext()));
        return new Symbol(sym.ESTRUCTURA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 136: break;
          case 34: 
            { LexTok.add(new Token("IF",yycolumn,yyline,yytext()));
        return new Symbol(sym.IF, yycolumn, yyline, yytext());
            } 
            // fall through
          case 137: break;
          case 35: 
            { LexTok.add(new Token("HSCRIPT_FINAL",yycolumn,yyline,yytext()));
        cadena="";
        yybegin(HTML);
        return new Symbol(sym.HSCRIPT_FINAL,yycolumn,yyline,yytext());
            } 
            // fall through
          case 138: break;
          case 36: 
            { LexTok.add(new Token("AND",yycolumn,yyline,yytext()));
        return new Symbol(sym.AND,yycolumn,yyline,yytext());
            } 
            // fall through
          case 139: break;
          case 37: 
            { LexTok.add(new Token("OR",yycolumn,yyline,yytext()));
        return new Symbol(sym.OR,yycolumn,yyline,yytext());
            } 
            // fall through
          case 140: break;
          case 38: 
            { LexTok.add(new Token("IGUAL_IGUAL",yycolumn,yyline,yytext()));
        return new Symbol(sym.IGUAL_IGUAL,yycolumn,yyline,yytext());
            } 
            // fall through
          case 141: break;
          case 39: 
            { LexTok.add(new Token("DECIMAL",yycolumn,yyline,yytext()));
        return new Symbol(sym.DECIMAL, yycolumn, yyline, yytext());
            } 
            // fall through
          case 142: break;
          case 40: 
            { LexTok.add(new Token("HSCRIPT_INICIO",yycolumn,yyline,yytext()));
    yybegin(HSCRIPT); 
    return new Symbol(sym.HSCRIP_INICIO,yycolumn,yyline,yytext());
            } 
            // fall through
          case 143: break;
          case 41: 
            { LexTok.add(new Token("PATH",yycolumn,yyline,yytext()));
        return new Symbol(sym.PATH,yycolumn,yyline,yytext());
            } 
            // fall through
          case 144: break;
          case 42: 
            { LexTok.add(new Token("ALTO",yycolumn,yyline,yytext()));
        return new Symbol(sym.ALTO,yycolumn,yyline,yytext());
            } 
            // fall through
          case 145: break;
          case 43: 
            { LexTok.add(new Token("BOOLEANO",yycolumn,yyline,yytext()));
        return new Symbol(sym.BOOLEANO,yycolumn,yyline,yytext());
            } 
            // fall through
          case 146: break;
          case 44: 
            { LexTok.add(new Token("ECHO",yycolumn,yyline,yytext()));
        return new Symbol(sym.ECHO, yycolumn, yyline, yytext());
            } 
            // fall through
          case 147: break;
          case 45: 
            { LexTok.add(new Token("ELSE",yycolumn,yyline,yytext()));
        return new Symbol(sym.ELSE, yycolumn, yyline, yytext());
            } 
            // fall through
          case 148: break;
          case 46: 
            { LexTok.add(new Token("FONDO",yycolumn,yyline,yytext()));
        return new Symbol(sym.FONDO,yycolumn,yyline,yytext());
            } 
            // fall through
          case 149: break;
          case 47: 
            { LexTok.add(new Token("ANCHO",yycolumn,yyline,yytext()));
        return new Symbol(sym.ANCHO,yycolumn,yyline,yytext());
            } 
            // fall through
          case 150: break;
          case 48: 
            { LexTok.add(new Token("TEXTO",yycolumn,yyline,yytext()));
        return new Symbol(sym.TEXTO, yycolumn, yyline, yytext());
            } 
            // fall through
          case 151: break;
          case 49: 
            { LexTok.add(new Token("BORDE",yycolumn,yyline,yytext()));
        return new Symbol(sym.BORDE,yycolumn,yyline,yytext());
            } 
            // fall through
          case 152: break;
          case 50: 
            { LexTok.add(new Token("SETID",yycolumn,yyline,yytext()));
        return new Symbol(sym.SETID, yycolumn, yyline, yytext());
            } 
            // fall through
          case 153: break;
          case 51: 
            { LexTok.add(new Token("GETID",yycolumn,yyline,yytext()));
        return new Symbol(sym.GETID, yycolumn, yyline, yytext());
            } 
            // fall through
          case 154: break;
          case 52: 
            { LexTok.add(new Token("BOTON_INICIO",yycolumn,yyline,yytext()));
    yybegin(BOTON);
    return new Symbol(sym.BOTON_INICIO,yycolumn,yyline,yytext());
            } 
            // fall through
          case 155: break;
          case 53: 
            { LexTok.add(new Token("TABLA_INICIO",yycolumn,yyline,yytext()));
    yybegin(TABLA);
    return new Symbol(sym.TABLA_INICIO,yycolumn,yyline,yytext());
            } 
            // fall through
          case 156: break;
          case 54: 
            { LexTok.add(new Token("FILA_INICIO",yycolumn,yyline,yytext()));
    cadena="";
    yybegin(HTML);
    return new Symbol(sym.FILA_INICIO,yycolumn,yyline,yytext());
            } 
            // fall through
          case 157: break;
          case 55: 
            { LexTok.add(new Token("FILA_FINAL",yycolumn,yyline,yytext()));
    cadena="";
    yybegin(HTML);
    return new Symbol(sym.FILA_FINAL,yycolumn,yyline,yytext());
            } 
            // fall through
          case 158: break;
          case 56: 
            { LexTok.add(new Token("COMPI_INICIO",yycolumn,yyline,yytext()));
    cadena = "";
    yybegin(HTML);
    return new Symbol(sym.COMPI_INICIO,yycolumn,yyline,yytext());
            } 
            // fall through
          case 159: break;
          case 57: 
            { LexTok.add(new Token("CUERPO_INICIO",yycolumn,yyline,yytext()));
    yybegin(CUERPO);
    return new Symbol(sym.CUERPO_INICIO,yycolumn,yyline,yytext());
            } 
            // fall through
          case 160: break;
          case 58: 
            { LexTok.add(new Token("IMAGEN_INICIO",yycolumn,yyline,yytext()));
    yybegin(IMAGEN);
    return new Symbol(sym.IMAGEN_INICIO,yycolumn,yyline,yytext());
            } 
            // fall through
          case 161: break;
          case 59: 
            { LexTok.add(new Token("REPETIR",yycolumn,yyline,yytext()));
        return new Symbol(sym.REPETIR, yycolumn, yyline, yytext());
            } 
            // fall through
          case 162: break;
          case 60: 
            { LexTok.add(new Token("SETPATH",yycolumn,yyline,yytext()));
        return new Symbol(sym.SETPATH, yycolumn, yyline, yytext());
            } 
            // fall through
          case 163: break;
          case 61: 
            { LexTok.add(new Token("SETALTO",yycolumn,yyline,yytext()));
        return new Symbol(sym.SETALTO, yycolumn, yyline, yytext());
            } 
            // fall through
          case 164: break;
          case 62: 
            { LexTok.add(new Token("GETPATH",yycolumn,yyline,yytext()));
        return new Symbol(sym.GETPATH, yycolumn, yyline, yytext());
            } 
            // fall through
          case 165: break;
          case 63: 
            { LexTok.add(new Token("GETALTO",yycolumn,yyline,yytext()));
        return new Symbol(sym.GETALTO, yycolumn, yyline, yytext());
            } 
            // fall through
          case 166: break;
          case 64: 
            { LexTok.add(new Token("COMPI_FINAL",yycolumn,yyline,yytext()));
    cadena = "";
    yybegin(HTML);
    return new Symbol(sym.COMPI_FINAL,yycolumn,yyline,yytext());
            } 
            // fall through
          case 167: break;
          case 65: 
            { LexTok.add(new Token("BOTON_FINAL",yycolumn,yyline,yytext()));
    cadena="";
    yybegin(HTML);
    return new Symbol(sym.BOTON_FINAL,yycolumn,yyline,yytext());
            } 
            // fall through
          case 168: break;
          case 66: 
            { LexTok.add(new Token("TABLA_FINAL",yycolumn,yyline,yytext()));
    cadena="";
    yybegin(HTML);
    return new Symbol(sym.TABLA_FINAL,yycolumn,yyline,yytext());
            } 
            // fall through
          case 169: break;
          case 67: 
            { LexTok.add(new Token("SALTO",yycolumn,yyline,yytext()));
    return new Symbol(sym.SALTO,yycolumn,yyline,yytext());
            } 
            // fall through
          case 170: break;
          case 68: 
            { LexTok.add(new Token("PARRAFO_INICIAL",yycolumn,yyline,yytext()));
    yybegin(PARRAFO);
    return new Symbol(sym.PARRAFO_INICIAL,yycolumn,yyline,yytext());
            } 
            // fall through
          case 171: break;
          case 69: 
            { LexTok.add(new Token("TITULO_INICIO",yycolumn,yyline,yytext()));
    cadena = "";
    yybegin(HTML);
    return new Symbol(sym.TITULO_INICIO,yycolumn,yyline,yytext());
            } 
            // fall through
          case 172: break;
          case 70: 
            { LexTok.add(new Token("TEXTOA_INICIO",yycolumn,yyline,yytext()));
    cadena="";
    yybegin(HTML);
    return new Symbol(sym.TEXTOA_INICIO,yycolumn,yyline,yytext());
            } 
            // fall through
          case 173: break;
          case 71: 
            { LexTok.add(new Token("TEXTOB_INICIO",yycolumn,yyline,yytext()));
    cadena="";
    yybegin(HTML);
    return new Symbol(sym.TEXTOB_INICIO,yycolumn,yyline,yytext());
            } 
            // fall through
          case 174: break;
          case 72: 
            { LexTok.add(new Token("INSERTAR",yycolumn,yyline,yytext()));
        return new Symbol(sym.INSERTAR, yycolumn, yyline, yytext());
            } 
            // fall through
          case 175: break;
          case 73: 
            { LexTok.add(new Token("SETBORDE",yycolumn,yyline,yytext()));
        return new Symbol(sym.SETBORDE, yycolumn, yyline, yytext());
            } 
            // fall through
          case 176: break;
          case 74: 
            { LexTok.add(new Token("SETTEXTO",yycolumn,yyline,yytext()));
        return new Symbol(sym.SETTEXTO, yycolumn, yyline, yytext());
            } 
            // fall through
          case 177: break;
          case 75: 
            { LexTok.add(new Token("GETANCHO",yycolumn,yyline,yytext()));
        return new Symbol(sym.GETANCHO, yycolumn, yyline, yytext());
            } 
            // fall through
          case 178: break;
          case 76: 
            { LexTok.add(new Token("GETBORDE",yycolumn,yyline,yytext()));
        return new Symbol(sym.GETBORDE, yycolumn, yyline, yytext());
            } 
            // fall through
          case 179: break;
          case 77: 
            { LexTok.add(new Token("GETTEXTO",yycolumn,yyline,yytext()));
        return new Symbol(sym.GETTEXTO, yycolumn, yyline, yytext());
            } 
            // fall through
          case 180: break;
          case 78: 
            { LexTok.add(new Token("CUERPO_FINAL",yycolumn,yyline,yytext()));
    cadena = "";
    yybegin(HTML);
    return new Symbol(sym.CUERPO_FINAL,yycolumn,yyline,yytext());
            } 
            // fall through
          case 181: break;
          case 79: 
            { LexTok.add(new Token("IMAGEN_FINAL",yycolumn,yyline,yytext()));
    cadena="";
    yybegin(HTML);
    return new Symbol(sym.IMAGEN_FINAL,yycolumn,yyline,yytext());
            } 
            // fall through
          case 182: break;
          case 80: 
            { LexTok.add(new Token("TITULO_FINAL",yycolumn,yyline,yytext()));
    cadena = "";
    yybegin(HTML);
    return new Symbol(sym.TITULO_FINAL,yycolumn,yyline,yytext());
            } 
            // fall through
          case 183: break;
          case 81: 
            { LexTok.add(new Token("TEXTOA_FINAL",yycolumn,yyline,yytext()));
    cadena="";
    yybegin(HTML);
    return new Symbol(sym.TEXTOA_FINAL,yycolumn,yyline,yytext());
            } 
            // fall through
          case 184: break;
          case 82: 
            { LexTok.add(new Token("TEXTOB_FINAL",yycolumn,yyline,yytext()));
    cadena="";
    yybegin(HTML);
    return new Symbol(sym.TEXTOB_FINAL,yycolumn,yyline,yytext());
            } 
            // fall through
          case 185: break;
          case 83: 
            { LexTok.add(new Token("COLUMNA_INICIO",yycolumn,yyline,yytext()));
    cadena="";
    yybegin(HTML);
    return new Symbol(sym.COLUMNA_INICIO,yycolumn,yyline,yytext());
            } 
            // fall through
          case 186: break;
          case 84: 
            { LexTok.add(new Token("ESPACIO_INICIO",yycolumn,yyline,yytext()));
    cadena="";
    yybegin(HTML);
    return new Symbol(sym.ESPACIO_INICIO,yycolumn,yyline,yytext());
            } 
            // fall through
          case 187: break;
          case 85: 
            { LexTok.add(new Token("COLUMNA_FINAL",yycolumn,yyline,yytext()));
    cadena="";
    yybegin(HTML);
    return new Symbol(sym.COLUMNA_FINAL,yycolumn,yyline,yytext());
            } 
            // fall through
          case 188: break;
          case 86: 
            { LexTok.add(new Token("PARRAFO_FINAL",yycolumn,yyline,yytext()));
    cadena="";
    yybegin(HTML);
    return new Symbol(sym.PARRAFO_FINAL,yycolumn,yyline,yytext());
            } 
            // fall through
          case 189: break;
          case 87: 
            { LexTok.add(new Token("ESPACIO_FINAL",yycolumn,yyline,yytext()));
    cadena="";
    yybegin(HTML);
    return new Symbol(sym.ESPACIO_FINAL,yycolumn,yyline,yytext());
            } 
            // fall through
          case 190: break;
          case 88: 
            { LexTok.add(new Token("COLUMNAC_INICIO",yycolumn,yyline,yytext()));
    cadena="";
    yybegin(HTML);
    return new Symbol(sym.COLUMNAC_INICIO,yycolumn,yyline,yytext());
            } 
            // fall through
          case 191: break;
          case 89: 
            { LexTok.add(new Token("CABEZA_INICIO",yycolumn,yyline,yytext()));
    cadena = "";
    yybegin(HTML);
    return new Symbol(sym.CABEZA_INICIO,yycolumn,yyline,yytext());
            } 
            // fall through
          case 192: break;
          case 90: 
            { LexTok.add(new Token("ALINEACION",yycolumn,yyline,yytext()));
        return new Symbol(sym.ALINEACION,yycolumn,yyline,yytext());
            } 
            // fall through
          case 193: break;
          case 91: 
            { LexTok.add(new Token("CREARBOTON",yycolumn,yyline,yytext()));
        return new Symbol(sym.CREARBOTON, yycolumn, yyline, yytext());
            } 
            // fall through
          case 194: break;
          case 92: 
            { LexTok.add(new Token("CREARTABLA",yycolumn,yyline,yytext()));
        return new Symbol(sym.CREARTABLA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 195: break;
          case 93: 
            { LexTok.add(new Token("CLICKBOTON",yycolumn,yyline,yytext()));
        return new Symbol(sym.CLICKBOTON, yycolumn, yyline, yytext());
            } 
            // fall through
          case 196: break;
          case 94: 
            { LexTok.add(new Token("COLUMNAC_FINAL",yycolumn,yyline,yytext()));
    cadena="";
    yybegin(HTML);
    return new Symbol(sym.COLUMNAC_FINAL,yycolumn,yyline,yytext());
            } 
            // fall through
          case 197: break;
          case 95: 
            { LexTok.add(new Token("CABEZA_FINAL",yycolumn,yyline,yytext()));
    cadena = "";
    yybegin(HTML);
    return new Symbol(sym.CABEZA_FINAL,yycolumn,yyline,yytext());
            } 
            // fall through
          case 198: break;
          case 96: 
            { LexTok.add(new Token("CREARIMAGEN",yycolumn,yyline,yytext()));
        return new Symbol(sym.CREARIMAGEN, yycolumn, yyline, yytext());
            } 
            // fall through
          case 199: break;
          case 97: 
            { LexTok.add(new Token("CREARTEXTOA",yycolumn,yyline,yytext()));
        return new Symbol(sym.CREARTEXTOA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 200: break;
          case 98: 
            { LexTok.add(new Token("CREARTEXTOB",yycolumn,yyline,yytext()));
        return new Symbol(sym.CREARTEXTOB, yycolumn, yyline, yytext());
            } 
            // fall through
          case 201: break;
          case 99: 
            { LexTok.add(new Token("CREARPARRAFO",yycolumn,yyline,yytext()));
        return new Symbol(sym.CREARPARRAFO, yycolumn, yyline, yytext());
            } 
            // fall through
          case 202: break;
          case 100: 
            { LexTok.add(new Token("SETCONTENIDO",yycolumn,yyline,yytext()));
        return new Symbol(sym.SETCONTENIDO, yycolumn, yyline, yytext());
            } 
            // fall through
          case 203: break;
          case 101: 
            { LexTok.add(new Token("GETCONTENIDO",yycolumn,yyline,yytext()));
        return new Symbol(sym.GETCONTENIDO, yycolumn, yyline, yytext());
            } 
            // fall through
          case 204: break;
          case 102: 
            { LexTok.add(new Token("SETALINEACION",yycolumn,yyline,yytext()));
        return new Symbol(sym.SETALINEACION, yycolumn, yyline, yytext());
            } 
            // fall through
          case 205: break;
          case 103: 
            { LexTok.add(new Token("GETALINEACION",yycolumn,yyline,yytext()));
        return new Symbol(sym.GETALINEACION, yycolumn, yyline, yytext());
            } 
            // fall through
          case 206: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
