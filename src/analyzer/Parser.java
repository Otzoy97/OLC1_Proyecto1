
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analyzer;

import static analyzer.sym.terminalNames;
import java_cup.runtime.Symbol;
import html.*;
import html.hscript.*;
import html.table.*;
import html.Paragraph.Align;
import html.Image.Dimension;
import java.util.Queue;
import java.util.ArrayList;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;
import static proyecto.Proyecto.txtConsole;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\203\000\002\002\004\000\002\002\006\000\002\003" +
    "\007\000\002\004\006\000\002\004\011\000\002\005\004" +
    "\000\002\005\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\007\005\000\002\007\004" +
    "\000\002\010\006\000\002\010\011\000\002\011\005\000" +
    "\002\012\005\000\002\013\006\000\002\014\013\000\002" +
    "\014\013\000\002\014\013\000\002\014\013\000\002\014" +
    "\013\000\002\014\013\000\002\014\005\000\002\014\010" +
    "\000\002\014\010\000\002\014\010\000\002\014\010\000" +
    "\002\015\006\000\002\016\010\000\002\016\010\000\002" +
    "\017\006\000\002\017\011\000\002\021\006\000\002\021" +
    "\005\000\002\022\006\000\002\022\006\000\002\022\005" +
    "\000\002\022\005\000\002\023\004\000\002\023\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\024" +
    "\003\000\002\024\003\000\002\025\005\000\002\026\004" +
    "\000\002\026\003\000\002\027\004\000\002\027\004\000" +
    "\002\027\004\000\002\027\003\000\002\027\003\000\002" +
    "\027\004\000\002\027\004\000\002\027\004\000\002\030" +
    "\005\000\002\031\005\000\002\033\005\000\002\033\005" +
    "\000\002\033\005\000\002\033\005\000\002\033\005\000" +
    "\002\033\005\000\002\033\005\000\002\033\005\000\002" +
    "\033\005\000\002\033\005\000\002\033\005\000\002\033" +
    "\005\000\002\033\005\000\002\033\004\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\032\006\000\002" +
    "\032\006\000\002\032\006\000\002\032\006\000\002\032" +
    "\006\000\002\032\010\000\002\036\010\000\002\036\010" +
    "\000\002\036\010\000\002\036\010\000\002\036\010\000" +
    "\002\036\010\000\002\036\010\000\002\037\007\000\002" +
    "\037\007\000\002\037\007\000\002\037\007\000\002\037" +
    "\007\000\002\037\007\000\002\037\007\000\002\042\007" +
    "\000\002\043\005\000\002\043\003\000\002\044\007\000" +
    "\002\044\005\000\002\044\003\000\002\041\007\000\002" +
    "\041\005\000\002\040\005\000\002\040\003\000\002\045" +
    "\010\000\002\034\004\000\002\035\005\000\002\035\003" +
    "\000\002\046\011\000\002\046\015\000\002\047\004\000" +
    "\002\047\003\000\002\050\004\000\002\050\003\000\002" +
    "\050\003\000\002\051\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u015f\000\004\033\004\001\002\000\004\035\010\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\041\015\001\002\000\004\037\011\001\002\000" +
    "\004\102\012\001\002\000\004\040\013\001\002\000\004" +
    "\036\014\001\002\000\004\041\uffff\001\002\000\006\022" +
    "\020\042\021\001\002\000\004\034\017\001\002\000\004" +
    "\002\000\001\002\000\026\044\050\046\047\051\045\052" +
    "\030\054\037\056\040\063\036\067\044\100\027\102\033" +
    "\001\002\000\004\016\022\001\002\000\004\137\023\001" +
    "\002\000\004\022\024\001\002\000\026\044\050\046\047" +
    "\051\045\052\030\054\037\056\040\063\036\067\044\100" +
    "\027\102\033\001\002\000\032\043\ufff7\044\ufff7\045\ufff7" +
    "\046\ufff7\051\ufff7\052\ufff7\054\ufff7\056\ufff7\063\ufff7\067" +
    "\ufff7\100\ufff7\102\ufff7\001\002\000\032\043\ufff4\044\ufff4" +
    "\045\ufff4\046\ufff4\051\ufff4\052\ufff4\054\ufff4\056\ufff4\063" +
    "\ufff4\067\ufff4\100\ufff4\102\ufff4\001\002\000\014\103\252" +
    "\105\237\106\254\134\244\136\255\001\002\000\004\102" +
    "\235\001\002\000\032\043\ufff1\044\ufff1\045\ufff1\046\ufff1" +
    "\051\ufff1\052\ufff1\054\ufff1\056\ufff1\063\ufff1\067\ufff1\100" +
    "\ufff1\102\ufff1\001\002\000\032\043\ufffb\044\ufffb\045\ufffb" +
    "\046\ufffb\051\ufffb\052\ufffb\054\ufffb\056\ufffb\063\ufffb\067" +
    "\ufffb\100\ufffb\102\ufffb\001\002\000\032\043\ufff2\044\ufff2" +
    "\045\ufff2\046\ufff2\051\ufff2\052\ufff2\054\ufff2\056\ufff2\063" +
    "\ufff2\067\ufff2\100\ufff2\102\ufff2\001\002\000\032\043\ufff8" +
    "\044\ufff8\045\ufff8\046\ufff8\051\ufff8\052\ufff8\054\ufff8\056" +
    "\ufff8\063\ufff8\067\ufff8\100\ufff8\102\ufff8\001\002\000\032" +
    "\043\ufffa\044\ufffa\045\ufffa\046\ufffa\051\ufffa\052\ufffa\054" +
    "\ufffa\056\ufffa\063\ufffa\067\ufffa\100\ufffa\102\ufffa\001\002" +
    "\000\006\064\216\065\217\001\002\000\004\102\214\001" +
    "\002\000\010\057\134\060\135\061\136\001\002\000\030" +
    "\043\133\044\050\046\047\051\045\052\030\054\037\056" +
    "\040\063\036\067\044\100\027\102\033\001\002\000\032" +
    "\043\ufff5\044\ufff5\045\ufff5\046\ufff5\051\ufff5\052\ufff5\054" +
    "\ufff5\056\ufff5\063\ufff5\067\ufff5\100\ufff5\102\ufff5\001\002" +
    "\000\032\043\ufff6\044\ufff6\045\ufff6\046\ufff6\051\ufff6\052" +
    "\ufff6\054\ufff6\056\ufff6\063\ufff6\067\ufff6\100\ufff6\102\ufff6" +
    "\001\002\000\006\022\066\070\067\001\002\000\032\043" +
    "\ufff9\044\ufff9\045\ufff9\046\ufff9\051\ufff9\052\ufff9\054\ufff9" +
    "\056\ufff9\063\ufff9\067\ufff9\100\ufff9\102\ufff9\001\002\000" +
    "\032\043\ufff3\044\ufff3\045\ufff3\046\ufff3\051\ufff3\052\ufff3" +
    "\054\ufff3\056\ufff3\063\ufff3\067\ufff3\100\ufff3\102\ufff3\001" +
    "\002\000\006\022\055\047\056\001\002\000\030\044\050" +
    "\045\051\046\047\051\045\052\030\054\037\056\040\063" +
    "\036\067\044\100\027\102\033\001\002\000\032\043\uffef" +
    "\044\uffef\045\uffef\046\uffef\051\uffef\052\uffef\054\uffef\056" +
    "\uffef\063\uffef\067\uffef\100\uffef\102\uffef\001\002\000\030" +
    "\044\050\045\053\046\047\051\045\052\030\054\037\056" +
    "\040\063\036\067\044\100\027\102\033\001\002\000\032" +
    "\043\ufff0\044\ufff0\045\ufff0\046\ufff0\051\ufff0\052\ufff0\054" +
    "\ufff0\056\ufff0\063\ufff0\067\ufff0\100\ufff0\102\ufff0\001\002" +
    "\000\032\043\ufffc\044\ufffc\045\ufffc\046\ufffc\051\ufffc\052" +
    "\ufffc\054\ufffc\056\ufffc\063\ufffc\067\ufffc\100\ufffc\102\ufffc" +
    "\001\002\000\004\102\064\001\002\000\004\016\057\001" +
    "\002\000\004\137\060\001\002\000\004\022\061\001\002" +
    "\000\004\102\062\001\002\000\004\050\063\001\002\000" +
    "\036\043\uffed\044\uffed\045\uffed\046\uffed\051\uffed\052\uffed" +
    "\054\uffed\056\uffed\063\uffed\067\uffed\075\uffed\077\uffed\100" +
    "\uffed\102\uffed\001\002\000\004\050\065\001\002\000\036" +
    "\043\uffee\044\uffee\045\uffee\046\uffee\051\uffee\052\uffee\054" +
    "\uffee\056\uffee\063\uffee\067\uffee\075\uffee\077\uffee\100\uffee" +
    "\102\uffee\001\002\000\004\072\075\001\002\000\004\016" +
    "\070\001\002\000\006\142\072\143\071\001\002\000\044" +
    "\004\uffca\010\uffca\012\uffca\013\uffca\014\uffca\015\uffca\017" +
    "\uffca\020\uffca\022\uffca\023\uffca\024\uffca\025\uffca\026\uffca" +
    "\027\uffca\030\uffca\031\uffca\032\uffca\001\002\000\044\004" +
    "\uffcb\010\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb\017\uffcb" +
    "\020\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027" +
    "\uffcb\030\uffcb\031\uffcb\032\uffcb\001\002\000\004\022\074" +
    "\001\002\000\004\072\075\001\002\000\006\074\102\076" +
    "\103\001\002\000\006\071\077\072\100\001\002\000\032" +
    "\043\uffda\044\uffda\045\uffda\046\uffda\051\uffda\052\uffda\054" +
    "\uffda\056\uffda\063\uffda\067\uffda\100\uffda\102\uffda\001\002" +
    "\000\006\074\102\076\103\001\002\000\010\073\122\074" +
    "\120\076\121\001\002\000\016\046\047\051\110\056\040" +
    "\063\036\100\027\102\111\001\002\000\016\046\047\051" +
    "\110\056\040\063\036\100\027\102\111\001\002\000\022" +
    "\046\uffce\051\uffce\056\uffce\063\uffce\075\uffce\077\uffce\100" +
    "\uffce\102\uffce\001\002\000\020\046\047\051\110\056\040" +
    "\063\036\077\114\100\027\102\111\001\002\000\022\046" +
    "\uffcd\051\uffcd\056\uffcd\063\uffcd\075\uffcd\077\uffcd\100\uffcd" +
    "\102\uffcd\001\002\000\022\046\uffd2\051\uffd2\056\uffd2\063" +
    "\uffd2\075\uffd2\077\uffd2\100\uffd2\102\uffd2\001\002\000\022" +
    "\046\uffd1\051\uffd1\056\uffd1\063\uffd1\075\uffd1\077\uffd1\100" +
    "\uffd1\102\uffd1\001\002\000\022\046\uffcc\051\uffcc\056\uffcc" +
    "\063\uffcc\075\uffcc\077\uffcc\100\uffcc\102\uffcc\001\002\000" +
    "\022\046\uffcf\051\uffcf\056\uffcf\063\uffcf\075\uffcf\077\uffcf" +
    "\100\uffcf\102\uffcf\001\002\000\022\046\uffd0\051\uffd0\056" +
    "\uffd0\063\uffd0\075\uffd0\077\uffd0\100\uffd0\102\uffd0\001\002" +
    "\000\010\073\uffd5\074\uffd5\076\uffd5\001\002\000\022\046" +
    "\uffd3\051\uffd3\056\uffd3\063\uffd3\075\uffd3\077\uffd3\100\uffd3" +
    "\102\uffd3\001\002\000\020\046\047\051\110\056\040\063" +
    "\036\075\117\100\027\102\111\001\002\000\010\073\uffd4" +
    "\074\uffd4\076\uffd4\001\002\000\016\046\047\051\110\056" +
    "\040\063\036\100\027\102\111\001\002\000\016\046\047" +
    "\051\110\056\040\063\036\100\027\102\111\001\002\000" +
    "\006\071\uffd9\072\uffd9\001\002\000\020\046\047\051\110" +
    "\056\040\063\036\077\124\100\027\102\111\001\002\000" +
    "\010\073\uffd7\074\uffd7\076\uffd7\001\002\000\020\046\047" +
    "\051\110\056\040\063\036\075\126\100\027\102\111\001" +
    "\002\000\010\073\uffd6\074\uffd6\076\uffd6\001\002\000\010" +
    "\073\130\074\120\076\121\001\002\000\006\071\uffd8\072" +
    "\uffd8\001\002\000\006\071\132\072\100\001\002\000\032" +
    "\043\uffdb\044\uffdb\045\uffdb\046\uffdb\051\uffdb\052\uffdb\054" +
    "\uffdb\056\uffdb\063\uffdb\067\uffdb\100\uffdb\102\uffdb\001\002" +
    "\000\004\034\ufffd\001\002\000\004\016\176\001\002\000" +
    "\004\016\160\001\002\000\004\016\142\001\002\000\004" +
    "\022\140\001\002\000\004\062\141\001\002\000\036\043" +
    "\uffea\044\uffea\045\uffea\046\uffea\051\uffea\052\uffea\054\uffea" +
    "\056\uffea\063\uffea\067\uffea\075\uffea\077\uffea\100\uffea\102" +
    "\uffea\001\002\000\004\140\143\001\002\000\006\057\144" +
    "\060\145\001\002\000\004\016\153\001\002\000\004\016" +
    "\146\001\002\000\004\140\147\001\002\000\004\057\150" +
    "\001\002\000\004\016\151\001\002\000\004\137\152\001" +
    "\002\000\004\022\uffe4\001\002\000\004\137\154\001\002" +
    "\000\006\022\uffdf\060\155\001\002\000\004\016\156\001" +
    "\002\000\004\140\157\001\002\000\004\022\uffe6\001\002" +
    "\000\004\140\161\001\002\000\006\057\162\061\163\001" +
    "\002\000\004\016\171\001\002\000\004\016\164\001\002" +
    "\000\004\140\165\001\002\000\004\057\166\001\002\000" +
    "\004\016\167\001\002\000\004\137\170\001\002\000\004" +
    "\022\uffe5\001\002\000\004\137\172\001\002\000\006\022" +
    "\uffe1\061\173\001\002\000\004\016\174\001\002\000\004" +
    "\140\175\001\002\000\004\022\uffe7\001\002\000\004\137" +
    "\177\001\002\000\010\022\uffe3\060\201\061\200\001\002" +
    "\000\004\016\207\001\002\000\004\016\202\001\002\000" +
    "\004\140\203\001\002\000\006\022\uffe2\061\204\001\002" +
    "\000\004\016\205\001\002\000\004\140\206\001\002\000" +
    "\004\022\uffe9\001\002\000\004\140\210\001\002\000\006" +
    "\022\uffe0\060\211\001\002\000\004\016\212\001\002\000" +
    "\004\140\213\001\002\000\004\022\uffe8\001\002\000\004" +
    "\055\215\001\002\000\032\043\uffeb\044\uffeb\045\uffeb\046" +
    "\uffeb\051\uffeb\052\uffeb\054\uffeb\056\uffeb\063\uffeb\067\uffeb" +
    "\100\uffeb\102\uffeb\001\002\000\004\016\230\001\002\000" +
    "\004\016\223\001\002\000\004\022\221\001\002\000\004" +
    "\066\222\001\002\000\036\043\uffde\044\uffde\045\uffde\046" +
    "\uffde\051\uffde\052\uffde\054\uffde\056\uffde\063\uffde\067\uffde" +
    "\075\uffde\077\uffde\100\uffde\102\uffde\001\002\000\004\137" +
    "\224\001\002\000\004\064\225\001\002\000\004\016\226" +
    "\001\002\000\004\137\227\001\002\000\004\022\uffdc\001" +
    "\002\000\004\137\231\001\002\000\004\065\232\001\002" +
    "\000\004\016\233\001\002\000\004\137\234\001\002\000" +
    "\004\022\uffdd\001\002\000\004\053\236\001\002\000\032" +
    "\043\uffec\044\uffec\045\uffec\046\uffec\051\uffec\052\uffec\054" +
    "\uffec\056\uffec\063\uffec\067\uffec\100\uffec\102\uffec\001\002" +
    "\000\024\005\265\021\266\134\263\136\270\137\257\140" +
    "\264\141\260\142\072\143\071\001\002\000\004\030\u015b" +
    "\001\002\000\016\101\u0159\103\252\105\237\106\254\134" +
    "\244\136\255\001\002\000\004\030\u0158\001\002\000\004" +
    "\030\u0157\001\002\000\006\016\u0108\031\u0109\001\002\000" +
    "\004\030\u0107\001\002\000\016\101\uffc3\103\uffc3\105\uffc3" +
    "\106\uffc3\134\uffc3\136\uffc3\001\002\000\016\101\uffc2\103" +
    "\uffc2\105\uffc2\106\uffc2\134\uffc2\136\uffc2\001\002\000\004" +
    "\030\u0106\001\002\000\004\030\u0105\001\002\000\004\005" +
    "\373\001\002\000\016\101\uffc7\103\uffc7\105\uffc7\106\uffc7" +
    "\134\uffc7\136\uffc7\001\002\000\004\005\352\001\002\000" +
    "\004\016\256\001\002\000\024\005\265\021\266\134\263" +
    "\136\270\137\257\140\264\141\260\142\072\143\071\001" +
    "\002\000\044\004\uffab\010\uffab\012\uffab\013\uffab\014\uffab" +
    "\015\uffab\017\uffab\020\uffab\022\uffab\023\uffab\024\uffab\025" +
    "\uffab\026\uffab\027\uffab\030\uffab\031\uffab\032\uffab\001\002" +
    "\000\044\004\uffad\010\uffad\012\uffad\013\uffad\014\uffad\015" +
    "\uffad\017\uffad\020\uffad\022\uffad\023\uffad\024\uffad\025\uffad" +
    "\026\uffad\027\uffad\030\uffad\031\uffad\032\uffad\001\002\000" +
    "\044\004\uffaa\010\uffaa\012\uffaa\013\uffaa\014\uffaa\015\uffaa" +
    "\017\uffaa\020\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa\026" +
    "\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa\001\002\000\034" +
    "\012\301\013\274\014\272\015\303\017\273\020\305\022" +
    "\275\023\302\024\300\025\276\026\277\027\304\030\uffbe" +
    "\001\002\000\004\031\324\001\002\000\044\004\uffae\010" +
    "\uffae\012\uffae\013\uffae\014\uffae\015\uffae\017\uffae\020\uffae" +
    "\022\uffae\023\uffae\024\uffae\025\uffae\026\uffae\027\uffae\030" +
    "\uffae\031\uffae\032\uffae\001\002\000\024\005\265\021\266" +
    "\134\263\136\270\137\257\140\264\141\260\142\072\143" +
    "\071\001\002\000\024\005\265\021\266\134\263\136\270" +
    "\137\257\140\264\141\260\142\072\143\071\001\002\000" +
    "\044\004\uffa9\010\uffa9\012\uffa9\013\uffa9\014\uffa9\015\uffa9" +
    "\017\uffa9\020\uffa9\022\uffa9\023\uffa9\024\uffa9\025\uffa9\026" +
    "\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9\001\002\000\044" +
    "\004\uffac\010\uffac\012\uffac\013\uffac\014\uffac\015\uffac\017" +
    "\uffac\020\uffac\022\uffac\023\uffac\024\uffac\025\uffac\026\uffac" +
    "\027\uffac\030\uffac\031\uffac\032\uffac\001\002\000\044\004" +
    "\uffaf\010\uffaf\012\301\013\274\014\272\015\303\017\uffaf" +
    "\020\uffaf\022\275\023\302\024\300\025\276\026\277\027" +
    "\304\030\uffaf\031\uffaf\032\uffaf\001\002\000\024\005\265" +
    "\021\266\134\263\136\270\137\257\140\264\141\260\142" +
    "\072\143\071\001\002\000\024\005\265\021\266\134\263" +
    "\136\270\137\257\140\264\141\260\142\072\143\071\001" +
    "\002\000\024\005\265\021\266\134\263\136\270\137\257" +
    "\140\264\141\260\142\072\143\071\001\002\000\024\005" +
    "\265\021\266\134\263\136\270\137\257\140\264\141\260" +
    "\142\072\143\071\001\002\000\024\005\265\021\266\134" +
    "\263\136\270\137\257\140\264\141\260\142\072\143\071" +
    "\001\002\000\024\005\265\021\266\134\263\136\270\137" +
    "\257\140\264\141\260\142\072\143\071\001\002\000\024" +
    "\005\265\021\266\134\263\136\270\137\257\140\264\141" +
    "\260\142\072\143\071\001\002\000\024\005\265\021\266" +
    "\134\263\136\270\137\257\140\264\141\260\142\072\143" +
    "\071\001\002\000\024\005\265\021\266\134\263\136\270" +
    "\137\257\140\264\141\260\142\072\143\071\001\002\000" +
    "\024\005\265\021\266\134\263\136\270\137\257\140\264" +
    "\141\260\142\072\143\071\001\002\000\024\005\265\021" +
    "\266\134\263\136\270\137\257\140\264\141\260\142\072" +
    "\143\071\001\002\000\024\005\265\021\266\134\263\136" +
    "\270\137\257\140\264\141\260\142\072\143\071\001\002" +
    "\000\044\004\uffb6\010\uffb6\012\301\013\274\014\272\015" +
    "\303\017\273\020\uffb6\022\275\023\302\024\300\025\276" +
    "\026\277\027\304\030\uffb6\031\uffb6\032\uffb6\001\002\000" +
    "\044\004\uffb0\010\uffb0\012\301\013\274\014\272\015\303" +
    "\017\uffb0\020\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0\026" +
    "\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\001\002\000\044" +
    "\004\uffb9\010\uffb9\012\uffb9\013\uffb9\014\uffb9\015\uffb9\017" +
    "\uffb9\020\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9" +
    "\027\uffb9\030\uffb9\031\uffb9\032\uffb9\001\002\000\044\004" +
    "\uffb4\010\uffb4\012\301\013\274\014\272\015\303\017\uffb4" +
    "\020\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027" +
    "\uffb4\030\uffb4\031\uffb4\032\uffb4\001\002\000\044\004\uffbc" +
    "\010\uffbc\012\uffbc\013\uffbc\014\272\015\303\017\uffbc\020" +
    "\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc" +
    "\030\uffbc\031\uffbc\032\uffbc\001\002\000\044\004\uffb2\010" +
    "\uffb2\012\301\013\274\014\272\015\303\017\uffb2\020\uffb2" +
    "\022\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030" +
    "\uffb2\031\uffb2\032\uffb2\001\002\000\044\004\uffb1\010\uffb1" +
    "\012\301\013\274\014\272\015\303\017\uffb1\020\uffb1\022" +
    "\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1" +
    "\031\uffb1\032\uffb1\001\002\000\044\004\uffb3\010\uffb3\012" +
    "\301\013\274\014\272\015\303\017\uffb3\020\uffb3\022\uffb3" +
    "\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3\031" +
    "\uffb3\032\uffb3\001\002\000\044\004\uffb5\010\uffb5\012\301" +
    "\013\274\014\272\015\303\017\uffb5\020\uffb5\022\uffb5\023" +
    "\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5" +
    "\032\uffb5\001\002\000\044\004\uffbb\010\uffbb\012\uffbb\013" +
    "\uffbb\014\272\015\303\017\uffbb\020\uffbb\022\uffbb\023\uffbb" +
    "\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032" +
    "\uffbb\001\002\000\044\004\uffb7\010\uffb7\012\301\013\274" +
    "\014\272\015\303\017\uffb7\020\uffb7\022\275\023\302\024" +
    "\300\025\276\026\277\027\304\030\uffb7\031\uffb7\032\uffb7" +
    "\001\002\000\044\004\uffba\010\uffba\012\uffba\013\uffba\014" +
    "\uffba\015\uffba\017\uffba\020\uffba\022\uffba\023\uffba\024\uffba" +
    "\025\uffba\026\uffba\027\uffba\030\uffba\031\uffba\032\uffba\001" +
    "\002\000\034\004\323\012\301\013\274\014\272\015\303" +
    "\017\273\020\305\022\275\023\302\024\300\025\276\026" +
    "\277\027\304\001\002\000\044\004\uffb8\010\uffb8\012\uffb8" +
    "\013\uffb8\014\uffb8\015\uffb8\017\uffb8\020\uffb8\022\uffb8\023" +
    "\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8" +
    "\032\uffb8\001\002\000\020\110\325\111\330\112\331\120" +
    "\326\122\333\127\327\132\332\001\002\000\004\005\350" +
    "\001\002\000\004\005\346\001\002\000\004\005\344\001" +
    "\002\000\004\005\342\001\002\000\004\005\340\001\002" +
    "\000\004\005\336\001\002\000\004\005\334\001\002\000" +
    "\004\004\335\001\002\000\044\004\uff9b\010\uff9b\012\uff9b" +
    "\013\uff9b\014\uff9b\015\uff9b\017\uff9b\020\uff9b\022\uff9b\023" +
    "\uff9b\024\uff9b\025\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b" +
    "\032\uff9b\001\002\000\004\004\337\001\002\000\044\004" +
    "\uff95\010\uff95\012\uff95\013\uff95\014\uff95\015\uff95\017\uff95" +
    "\020\uff95\022\uff95\023\uff95\024\uff95\025\uff95\026\uff95\027" +
    "\uff95\030\uff95\031\uff95\032\uff95\001\002\000\004\004\341" +
    "\001\002\000\044\004\uff98\010\uff98\012\uff98\013\uff98\014" +
    "\uff98\015\uff98\017\uff98\020\uff98\022\uff98\023\uff98\024\uff98" +
    "\025\uff98\026\uff98\027\uff98\030\uff98\031\uff98\032\uff98\001" +
    "\002\000\004\004\343\001\002\000\044\004\uff97\010\uff97" +
    "\012\uff97\013\uff97\014\uff97\015\uff97\017\uff97\020\uff97\022" +
    "\uff97\023\uff97\024\uff97\025\uff97\026\uff97\027\uff97\030\uff97" +
    "\031\uff97\032\uff97\001\002\000\004\004\345\001\002\000" +
    "\044\004\uff96\010\uff96\012\uff96\013\uff96\014\uff96\015\uff96" +
    "\017\uff96\020\uff96\022\uff96\023\uff96\024\uff96\025\uff96\026" +
    "\uff96\027\uff96\030\uff96\031\uff96\032\uff96\001\002\000\004" +
    "\004\347\001\002\000\044\004\uff9a\010\uff9a\012\uff9a\013" +
    "\uff9a\014\uff9a\015\uff9a\017\uff9a\020\uff9a\022\uff9a\023\uff9a" +
    "\024\uff9a\025\uff9a\026\uff9a\027\uff9a\030\uff9a\031\uff9a\032" +
    "\uff9a\001\002\000\004\004\351\001\002\000\044\004\uff99" +
    "\010\uff99\012\uff99\013\uff99\014\uff99\015\uff99\017\uff99\020" +
    "\uff99\022\uff99\023\uff99\024\uff99\025\uff99\026\uff99\027\uff99" +
    "\030\uff99\031\uff99\032\uff99\001\002\000\024\005\265\021" +
    "\266\134\263\136\270\137\257\140\264\141\260\142\072" +
    "\143\071\001\002\000\034\004\354\012\301\013\274\014" +
    "\272\015\303\017\273\020\305\022\275\023\302\024\300" +
    "\025\276\026\277\027\304\001\002\000\004\007\355\001" +
    "\002\000\010\103\252\106\254\134\357\001\002\000\004" +
    "\030\372\001\002\000\004\031\366\001\002\000\012\006" +
    "\364\103\252\106\254\134\357\001\002\000\012\006\uff80" +
    "\103\uff80\106\uff80\134\uff80\001\002\000\012\006\uff81\103" +
    "\uff81\106\uff81\134\uff81\001\002\000\012\006\uff83\103\uff83" +
    "\106\uff83\134\uff83\001\002\000\020\006\uff7f\101\uff7f\103" +
    "\uff7f\105\uff7f\106\uff7f\134\uff7f\136\uff7f\001\002\000\012" +
    "\006\uff84\103\uff84\106\uff84\134\uff84\001\002\000\004\135" +
    "\367\001\002\000\004\005\370\001\002\000\004\004\371" +
    "\001\002\000\004\030\uff94\001\002\000\012\006\uff82\103" +
    "\uff82\106\uff82\134\uff82\001\002\000\024\005\265\021\266" +
    "\134\263\136\270\137\257\140\264\141\260\142\072\143" +
    "\071\001\002\000\034\004\375\012\301\013\274\014\272" +
    "\015\303\017\273\020\305\022\275\023\302\024\300\025" +
    "\276\026\277\027\304\001\002\000\004\007\376\001\002" +
    "\000\010\103\252\106\254\134\357\001\002\000\012\006" +
    "\u0100\103\252\106\254\134\357\001\002\000\022\006\uff86" +
    "\101\uff86\103\uff86\104\u0101\105\uff86\106\uff86\134\uff86\136" +
    "\uff86\001\002\000\004\007\u0102\001\002\000\010\103\252" +
    "\106\254\134\357\001\002\000\012\006\u0104\103\252\106" +
    "\254\134\357\001\002\000\020\006\uff85\101\uff85\103\uff85" +
    "\105\uff85\106\uff85\134\uff85\136\uff85\001\002\000\016\101" +
    "\uffc1\103\uffc1\105\uffc1\106\uffc1\134\uffc1\136\uffc1\001\002" +
    "\000\016\101\uffc6\103\uffc6\105\uffc6\106\uffc6\134\uffc6\136" +
    "\uffc6\001\002\000\016\101\uffbf\103\uffbf\105\uffbf\106\uffbf" +
    "\134\uffbf\136\uffbf\001\002\000\016\107\u012c\116\u012a\123" +
    "\u0130\124\u012e\125\u012d\130\u012f\001\002\000\024\113\u0111" +
    "\114\u010c\115\u0110\117\u010a\121\u010f\126\u010b\131\u010d\133" +
    "\u010e\135\367\001\002\000\004\005\u0127\001\002\000\004" +
    "\005\u0124\001\002\000\004\005\u0121\001\002\000\004\005" +
    "\u011e\001\002\000\004\005\u011b\001\002\000\004\005\u0118" +
    "\001\002\000\004\005\u0115\001\002\000\004\005\u0112\001" +
    "\002\000\024\005\265\021\266\134\263\136\270\137\257" +
    "\140\264\141\260\142\072\143\071\001\002\000\034\004" +
    "\u0114\012\301\013\274\014\272\015\303\017\273\020\305" +
    "\022\275\023\302\024\300\025\276\026\277\027\304\001" +
    "\002\000\004\030\uffa0\001\002\000\024\005\265\021\266" +
    "\134\263\136\270\137\257\140\264\141\260\142\072\143" +
    "\071\001\002\000\034\004\u0117\012\301\013\274\014\272" +
    "\015\303\017\273\020\305\022\275\023\302\024\300\025" +
    "\276\026\277\027\304\001\002\000\004\030\uff9f\001\002" +
    "\000\024\005\265\021\266\134\263\136\270\137\257\140" +
    "\264\141\260\142\072\143\071\001\002\000\034\004\u011a" +
    "\012\301\013\274\014\272\015\303\017\273\020\305\022" +
    "\275\023\302\024\300\025\276\026\277\027\304\001\002" +
    "\000\004\030\uffa2\001\002\000\024\005\265\021\266\134" +
    "\263\136\270\137\257\140\264\141\260\142\072\143\071" +
    "\001\002\000\034\004\u011d\012\301\013\274\014\272\015" +
    "\303\017\273\020\305\022\275\023\302\024\300\025\276" +
    "\026\277\027\304\001\002\000\004\030\uff8a\001\002\000" +
    "\024\005\265\021\266\134\263\136\270\137\257\140\264" +
    "\141\260\142\072\143\071\001\002\000\034\004\u0120\012" +
    "\301\013\274\014\272\015\303\017\273\020\305\022\275" +
    "\023\302\024\300\025\276\026\277\027\304\001\002\000" +
    "\004\030\uff9d\001\002\000\024\005\265\021\266\134\263" +
    "\136\270\137\257\140\264\141\260\142\072\143\071\001" +
    "\002\000\034\004\u0123\012\301\013\274\014\272\015\303" +
    "\017\273\020\305\022\275\023\302\024\300\025\276\026" +
    "\277\027\304\001\002\000\004\030\uff9e\001\002\000\024" +
    "\005\265\021\266\134\263\136\270\137\257\140\264\141" +
    "\260\142\072\143\071\001\002\000\034\004\u0126\012\301" +
    "\013\274\014\272\015\303\017\273\020\305\022\275\023" +
    "\302\024\300\025\276\026\277\027\304\001\002\000\004" +
    "\030\uff9c\001\002\000\024\005\265\021\266\134\263\136" +
    "\270\137\257\140\264\141\260\142\072\143\071\001\002" +
    "\000\034\004\u0129\012\301\013\274\014\272\015\303\017" +
    "\273\020\305\022\275\023\302\024\300\025\276\026\277" +
    "\027\304\001\002\000\004\030\uffa1\001\002\000\004\005" +
    "\u0151\001\002\000\004\030\uffbd\001\002\000\004\005\u0149" +
    "\001\002\000\004\005\u013c\001\002\000\004\005\u0139\001" +
    "\002\000\004\005\u0134\001\002\000\004\005\u0131\001\002" +
    "\000\024\005\265\021\266\134\263\136\270\137\257\140" +
    "\264\141\260\142\072\143\071\001\002\000\034\004\u0133" +
    "\012\301\013\274\014\272\015\303\017\273\020\305\022" +
    "\275\023\302\024\300\025\276\026\277\027\304\001\002" +
    "\000\004\030\uffa7\001\002\000\024\005\265\021\266\134" +
    "\263\136\270\137\257\140\264\141\260\142\072\143\071" +
    "\001\002\000\034\012\301\013\274\014\272\015\303\017" +
    "\273\020\305\022\275\023\302\024\300\025\276\026\277" +
    "\027\304\032\u0136\001\002\000\024\005\265\021\266\134" +
    "\263\136\270\137\257\140\264\141\260\142\072\143\071" +
    "\001\002\000\034\004\u0138\012\301\013\274\014\272\015" +
    "\303\017\273\020\305\022\275\023\302\024\300\025\276" +
    "\026\277\027\304\001\002\000\004\030\uffa3\001\002\000" +
    "\024\005\265\021\266\134\263\136\270\137\257\140\264" +
    "\141\260\142\072\143\071\001\002\000\034\004\u013b\012" +
    "\301\013\274\014\272\015\303\017\273\020\305\022\275" +
    "\023\302\024\300\025\276\026\277\027\304\001\002\000" +
    "\004\030\uffa6\001\002\000\004\011\u013d\001\002\000\024" +
    "\005\265\021\266\134\263\136\270\137\257\140\264\141" +
    "\260\142\072\143\071\001\002\000\006\004\u0140\032\u013f" +
    "\001\002\000\004\011\u0141\001\002\000\004\030\uffa4\001" +
    "\002\000\024\005\265\021\266\134\263\136\270\137\257" +
    "\140\264\141\260\142\072\143\071\001\002\000\036\010" +
    "\uff8b\012\301\013\274\014\272\015\303\017\273\020\305" +
    "\022\275\023\302\024\300\025\276\026\277\027\304\032" +
    "\uff8b\001\002\000\006\010\u0145\032\u0144\001\002\000\024" +
    "\005\265\021\266\134\263\136\270\137\257\140\264\141" +
    "\260\142\072\143\071\001\002\000\006\004\uff8e\032\uff8e" +
    "\001\002\000\036\010\uff8c\012\301\013\274\014\272\015" +
    "\303\017\273\020\305\022\275\023\302\024\300\025\276" +
    "\026\277\027\304\032\uff8c\001\002\000\006\010\u0148\032" +
    "\u0144\001\002\000\006\004\uff8d\032\uff8d\001\002\000\024" +
    "\005\265\021\266\134\263\136\270\137\257\140\264\141" +
    "\260\142\072\143\071\001\002\000\036\004\uff8f\012\301" +
    "\013\274\014\272\015\303\017\273\020\305\022\275\023" +
    "\302\024\300\025\276\026\277\027\304\032\u014d\001\002" +
    "\000\004\004\u014c\001\002\000\004\030\uffa5\001\002\000" +
    "\024\005\265\021\266\134\263\136\270\137\257\140\264" +
    "\141\260\142\072\143\071\001\002\000\036\004\uff90\012" +
    "\301\013\274\014\272\015\303\017\273\020\305\022\275" +
    "\023\302\024\300\025\276\026\277\027\304\032\u014f\001" +
    "\002\000\024\005\265\021\266\134\263\136\270\137\257" +
    "\140\264\141\260\142\072\143\071\001\002\000\034\004" +
    "\uff91\012\301\013\274\014\272\015\303\017\273\020\305" +
    "\022\275\023\302\024\300\025\276\026\277\027\304\001" +
    "\002\000\024\005\265\021\266\134\263\136\270\137\257" +
    "\140\264\141\260\142\072\143\071\001\002\000\004\004" +
    "\u0156\001\002\000\036\004\uff92\012\301\013\274\014\272" +
    "\015\303\017\273\020\305\022\275\023\302\024\300\025" +
    "\276\026\277\027\304\032\u0154\001\002\000\024\005\265" +
    "\021\266\134\263\136\270\137\257\140\264\141\260\142" +
    "\072\143\071\001\002\000\034\004\uff93\012\301\013\274" +
    "\014\272\015\303\017\273\020\305\022\275\023\302\024" +
    "\300\025\276\026\277\027\304\001\002\000\004\030\uffa8" +
    "\001\002\000\016\101\uffc4\103\uffc4\105\uffc4\106\uffc4\134" +
    "\uffc4\136\uffc4\001\002\000\016\101\uffc0\103\uffc0\105\uffc0" +
    "\106\uffc0\134\uffc0\136\uffc0\001\002\000\036\043\uffc9\044" +
    "\uffc9\045\uffc9\046\uffc9\051\uffc9\052\uffc9\054\uffc9\056\uffc9" +
    "\063\uffc9\067\uffc9\075\uffc9\077\uffc9\100\uffc9\102\uffc9\001" +
    "\002\000\016\101\uffc8\103\uffc8\105\uffc8\106\uffc8\134\uffc8" +
    "\136\uffc8\001\002\000\016\101\uffc5\103\uffc5\105\uffc5\106" +
    "\uffc5\134\uffc5\136\uffc5\001\002\000\036\012\301\013\274" +
    "\014\272\015\303\017\273\020\305\022\275\023\302\024" +
    "\300\025\276\026\277\027\304\030\uff87\031\uff87\001\002" +
    "\000\006\030\uff89\031\u015e\001\002\000\024\005\265\021" +
    "\266\134\263\136\270\137\257\140\264\141\260\142\072" +
    "\143\071\001\002\000\036\012\301\013\274\014\272\015" +
    "\303\017\273\020\305\022\275\023\302\024\300\025\276" +
    "\026\277\027\304\030\uff88\031\uff88\001\002\000\030\043" +
    "\u0161\044\050\046\047\051\045\052\030\054\037\056\040" +
    "\063\036\067\044\100\027\102\033\001\002\000\004\034" +
    "\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u015f\000\004\002\004\001\001\000\004\003\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\005\u015f\006" +
    "\031\007\045\010\034\011\042\012\041\013\024\015\025" +
    "\017\033\025\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\005\040\006\031\007\045" +
    "\010\034\011\042\012\041\013\024\015\025\017\033\025" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\026\240\027\252\030\247\031\237\034\242\036\250\042" +
    "\241\045\244\046\245\051\246\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\217\001\001" +
    "\000\002\001\001\000\004\014\136\001\001\000\024\006" +
    "\053\007\045\010\034\011\042\012\041\013\024\015\025" +
    "\017\033\025\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\005\051\006\031\007\045\010" +
    "\034\011\042\012\041\013\024\015\025\017\033\025\030" +
    "\001\001\000\002\001\001\000\024\006\053\007\045\010" +
    "\034\011\042\012\041\013\024\015\025\017\033\025\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\130\001\001" +
    "\000\002\001\001\000\004\024\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\075" +
    "\001\001\000\004\022\126\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\100\001\001\000\002\001\001" +
    "\000\016\010\112\013\111\015\103\020\106\023\115\025" +
    "\105\001\001\000\016\010\112\013\111\015\103\020\106" +
    "\023\104\025\105\001\001\000\002\001\001\000\014\010" +
    "\112\013\111\015\103\020\114\025\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\010\112\013\111\015\103\020" +
    "\114\025\105\001\001\000\002\001\001\000\016\010\112" +
    "\013\111\015\103\020\106\023\124\025\105\001\001\000" +
    "\016\010\112\013\111\015\103\020\106\023\122\025\105" +
    "\001\001\000\002\001\001\000\014\010\112\013\111\015" +
    "\103\020\114\025\105\001\001\000\002\001\001\000\014" +
    "\010\112\013\111\015\103\020\114\025\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\024\260\033\u015b\035\u015c" +
    "\037\266\001\001\000\002\001\001\000\024\027\u0159\030" +
    "\247\031\237\034\242\036\250\042\241\045\244\046\245" +
    "\051\246\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\024\260\033\261\037\266\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\024\260\033" +
    "\321\037\266\001\001\000\010\024\260\033\270\037\266" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\024\260\033\320\037\266\001\001\000\010" +
    "\024\260\033\317\037\266\001\001\000\010\024\260\033" +
    "\316\037\266\001\001\000\010\024\260\033\315\037\266" +
    "\001\001\000\010\024\260\033\314\037\266\001\001\000" +
    "\010\024\260\033\313\037\266\001\001\000\010\024\260" +
    "\033\312\037\266\001\001\000\010\024\260\033\311\037" +
    "\266\001\001\000\010\024\260\033\310\037\266\001\001" +
    "\000\010\024\260\033\307\037\266\001\001\000\010\024" +
    "\260\033\306\037\266\001\001\000\010\024\260\033\305" +
    "\037\266\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\024\260\033\352\037\266" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\042" +
    "\355\046\361\047\357\050\362\051\360\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\042\355\046\361\050" +
    "\364\051\360\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\024\260\033\373\037" +
    "\266\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\042\355\046\361\047\376\050\362\051\360\001\001\000" +
    "\012\042\355\046\361\050\364\051\360\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\042\355\046\361\047" +
    "\u0102\050\362\051\360\001\001\000\012\042\355\046\361" +
    "\050\364\051\360\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\u012a" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\024\260\033\u0112\037\266\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\024\260\033\u0115\037\266\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\024\260" +
    "\033\u0118\037\266\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\024\260\033\u011b\037\266\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\024\260\033\u011e\037" +
    "\266\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\024\260\033\u0121\037\266\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\024\260\033\u0124\037\266\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\024\260\033" +
    "\u0127\037\266\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\024\260\033\u0131\037\266\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\024\260\033\u0134" +
    "\037\266\001\001\000\002\001\001\000\010\024\260\033" +
    "\u0136\037\266\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\024\260\033\u0139\037\266\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\041\u013d\001\001\000\012" +
    "\024\260\033\u0141\037\266\040\u0146\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\024\260" +
    "\033\u0141\037\266\040\u0142\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\024\260\033\u0145\037\266\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\024\260\033\u0149\037\266\044\u014a" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\024\260\033\u014d\037\266\001\001\000\002" +
    "\001\001\000\010\024\260\033\u014f\037\266\001\001\000" +
    "\002\001\001\000\012\024\260\033\u0152\037\266\043\u0151" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\024" +
    "\260\033\u0154\037\266\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\024\260\033\u015e\037\266\001" +
    "\001\000\002\001\001\000\024\006\053\007\045\010\034" +
    "\011\042\012\041\013\024\015\025\017\033\025\030\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //public boolean flag = true;
    public Html html_file;
    /**
     * Servirá como tabla de símbolos
     */
    public ArrayList<Variable> listaVariable = new ArrayList();
    /**
     * Servirá como tabla de símbolos pero para los struct
     */
    public  ArrayList<Estructura> listaEstrucutra = new ArrayList();
    /**
     * Cola de errores
     */
    public  ArrayList<String> errores = new ArrayList();
    /*Errores*/
    public void syntax_error (Symbol s){
        StringBuilder sb = new StringBuilder();
        sb.append("<tr>");
        sb.append("<td>").append("Leve").append("</td>");
        sb.append("<td>").append(s.right+"").append("</td>");
        sb.append("<td>").append(s.left+"").append("</td>");
        sb.append("<td>").append(s.value+"").append("</td>");
        sb.append("<td>").append(terminalNames[s.sym]+"").append("</td>");
        sb.append("</tr>");
        errores.add(sb.toString());
    }

    public void unrecovered_syntax_error(Symbol s){ 
        StringBuilder sb = new StringBuilder();
        sb.append("<tr>");
        sb.append("<td>").append("Grave").append("</td>");
        sb.append("<td>").append(s.right+"").append("</td>");
        sb.append("<td>").append(s.left+"").append("</td>");
        sb.append("<td>").append(s.value+"").append("</td>");
        sb.append("<td>").append(terminalNames[s.sym]+"").append("</td>");
        sb.append("</tr>");
        errores.add(sb.toString());
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {


  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= COMPI_INICIO CABECERA CUERPO COMPI_FINAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Head a = (Head)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Body b = (Body)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 html_file = new Html(a,b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CABECERA ::= CABEZA_INICIO TITULO_INICIO PLAINTEXT TITULO_FINAL CABEZA_FINAL 
            {
              Head RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Head(new Title(a.toString())); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CABECERA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CUERPO ::= CUERPO_INICIO MAYOR_QUE BODY CUERPO_FINAL 
            {
              Body RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Queue<ComponentHTML> a = (Queue<ComponentHTML>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Body(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CUERPO ::= CUERPO_INICIO FONDO IGUAL CADENA MAYOR_QUE BODY CUERPO_FINAL 
            {
              Body RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Queue<ComponentHTML> b = (Queue<ComponentHTML>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Body(a,b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BODY ::= BODY SUBBODY 
            {
              Queue<ComponentHTML> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Queue<ComponentHTML> a = (Queue<ComponentHTML>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComponentHTML b = (ComponentHTML)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 a.add(b);  RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BODY",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BODY ::= SUBBODY 
            {
              Queue<ComponentHTML> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComponentHTML a = (ComponentHTML)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Queue<ComponentHTML> queueComp = new LinkedList<ComponentHTML>(); queueComp.add(a); RESULT = queueComp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BODY",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SUBBODY ::= PARRAFO 
            {
              ComponentHTML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComponentHTML a = (ComponentHTML)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBBODY",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SUBBODY ::= SALTO 
            {
              ComponentHTML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BreakLine(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBBODY",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SUBBODY ::= TABLA 
            {
              ComponentHTML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComponentHTML a = (ComponentHTML)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBBODY",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SUBBODY ::= IMAGEN 
            {
              ComponentHTML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComponentHTML a = (ComponentHTML)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBBODY",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SUBBODY ::= TEXTOA 
            {
              ComponentHTML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComponentHTML a = (ComponentHTML)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBBODY",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SUBBODY ::= TEXTOB 
            {
              ComponentHTML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComponentHTML a = (ComponentHTML)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBBODY",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SUBBODY ::= BOTON 
            {
              ComponentHTML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComponentHTML a = (ComponentHTML)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBBODY",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SUBBODY ::= ESPACIO 
            {
              ComponentHTML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComponentHTML a = (ComponentHTML)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBBODY",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SUBBODY ::= PLAINTEXT 
            {
              ComponentHTML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PlainText(a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBBODY",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SUBBODY ::= HSCRIPT 
            {
              ComponentHTML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComponentHTML a = (ComponentHTML)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBBODY",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ESPACIO ::= ESPACIO_INICIO BODY ESPACIO_FINAL 
            {
              ComponentHTML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Queue<ComponentHTML> a = (Queue<ComponentHTML>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT =  new Room(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESPACIO",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ESPACIO ::= ESPACIO_INICIO ESPACIO_FINAL 
            {
              ComponentHTML RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESPACIO",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PARRAFO ::= PARRAFO_INICIO MAYOR_QUE PLAINTEXT PARRAFO_FINAL 
            {
              ComponentHTML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Paragraph(a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARRAFO",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PARRAFO ::= PARRAFO_INICIO ALINEACION IGUAL CADENA MAYOR_QUE PLAINTEXT PARRAFO_FINAL 
            {
              ComponentHTML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  
    Align alineado = null;
    switch(a.toString().toLowerCase()){
        case "justificado":
            alineado = Align.JUSTIFY;
            break;
        case "derecha":
            alineado = Align.DER;
            break;
        case "izquierda":
            alineado = Align.IZQ;
            break;
        case "centrado":
            alineado = Align.CENTER;
            break;
        default:
            alineado = Align.IZQ;
            break;
    }
    RESULT = new Paragraph(b.toString(), alineado);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARRAFO",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TEXTOA ::= TEXTOA_INICIO PLAINTEXT TEXTOA_FINAL 
            {
              ComponentHTML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new TextA(a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TEXTOA",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TEXTOB ::= TEXTOB_INICIO PLAINTEXT TEXTOB_FINAL 
            {
              ComponentHTML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new TextB(a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TEXTOB",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // IMAGEN ::= IMAGEN_INICIO IMG_ATR MAYOR_QUE IMAGEN_FINAL 
            {
              ComponentHTML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ComponentHTML a = (ComponentHTML)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IMAGEN",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // IMG_ATR ::= PATH IGUAL CADENA ALTO IGUAL ENTERO ANCHO IGUAL ENTERO 
            {
              ComponentHTML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Image(a.toString(), Integer.parseInt(b.toString()), Integer.parseInt(c.toString())) ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IMG_ATR",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // IMG_ATR ::= PATH IGUAL CADENA ANCHO IGUAL ENTERO ALTO IGUAL ENTERO 
            {
              ComponentHTML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Image(a.toString(), Integer.parseInt(c.toString()), Integer.parseInt(b.toString())) ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IMG_ATR",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // IMG_ATR ::= ALTO IGUAL ENTERO PATH IGUAL CADENA ANCHO IGUAL ENTERO 
            {
              ComponentHTML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Image(b.toString(), Integer.parseInt(a.toString()) ,Integer.parseInt(c.toString())) ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IMG_ATR",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // IMG_ATR ::= ANCHO IGUAL ENTERO PATH IGUAL CADENA ALTO IGUAL ENTERO 
            {
              ComponentHTML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Image(b.toString(),Integer.parseInt(c.toString()),Integer.parseInt(a.toString())  ) ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IMG_ATR",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // IMG_ATR ::= ALTO IGUAL ENTERO ANCHO IGUAL ENTERO PATH IGUAL CADENA 
            {
              ComponentHTML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Image(c.toString(),Integer.parseInt(a.toString()),Integer.parseInt(b.toString())) ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IMG_ATR",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // IMG_ATR ::= ANCHO IGUAL ENTERO ALTO IGUAL ENTERO PATH IGUAL CADENA 
            {
              ComponentHTML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Image(c.toString(), Integer.parseInt(b.toString()),Integer.parseInt(a.toString()) ) ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IMG_ATR",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // IMG_ATR ::= PATH IGUAL CADENA 
            {
              ComponentHTML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Image(a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IMG_ATR",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // IMG_ATR ::= PATH IGUAL CADENA ALTO IGUAL ENTERO 
            {
              ComponentHTML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Image(a.toString(), Integer.parseInt(b.toString()), Dimension.ALTO); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IMG_ATR",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // IMG_ATR ::= ALTO IGUAL ENTERO PATH IGUAL CADENA 
            {
              ComponentHTML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Image(b.toString(), Integer.parseInt(a.toString()) , Dimension.ALTO); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IMG_ATR",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // IMG_ATR ::= PATH IGUAL CADENA ANCHO IGUAL ENTERO 
            {
              ComponentHTML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Image(a.toString(), Integer.parseInt(b.toString()), Dimension.ANCHO); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IMG_ATR",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // IMG_ATR ::= ANCHO IGUAL ENTERO PATH IGUAL CADENA 
            {
              ComponentHTML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Image(b.toString(), Integer.parseInt(a.toString()) , Dimension.ANCHO); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IMG_ATR",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // BOTON ::= BOTON_INICIO BTN_ATR MAYOR_QUE BOTON_FINAL 
            {
              ComponentHTML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ComponentHTML a = (ComponentHTML)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOTON",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // BTN_ATR ::= ID IGUAL CADENA TEXTO IGUAL CADENA 
            {
              ComponentHTML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Button(b.toString(), a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BTN_ATR",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // BTN_ATR ::= TEXTO IGUAL CADENA ID IGUAL CADENA 
            {
              ComponentHTML RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Button(b.toString(), a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BTN_ATR",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TABLA ::= TABLA_INICIO MAYOR_QUE BODY_TABLA TABLA_FINAL 
            {
              ComponentHTML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Queue<ComponentHTML> a = (Queue<ComponentHTML>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Table(a,false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TABLA",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TABLA ::= TABLA_INICIO BORDE IGUAL BOOLEANO MAYOR_QUE BODY_TABLA TABLA_FINAL 
            {
              ComponentHTML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		boolean a = (boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Queue<ComponentHTML> b = (Queue<ComponentHTML>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Table(b,a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TABLA",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // BODY_TABLA ::= BODY_TABLA FILA_INICIO ROW_BODY FILA_FINAL 
            {
              Queue<ComponentHTML> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Queue<ComponentHTML> b = (Queue<ComponentHTML>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Queue<ComponentHTML> a = (Queue<ComponentHTML>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 b.add(new Row(a)); RESULT = b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BODY_TABLA",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // BODY_TABLA ::= FILA_INICIO ROW_BODY FILA_FINAL 
            {
              Queue<ComponentHTML> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Queue<ComponentHTML> a = (Queue<ComponentHTML>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    Queue<ComponentHTML> rowContenido = new LinkedList<ComponentHTML>();
    rowContenido.add(new Row(a));
    RESULT = rowContenido;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BODY_TABLA",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ROW_BODY ::= ROW_BODY COLUMNAC_INICIO COL_BODY COLUMNAC_FINAL 
            {
              Queue<ComponentHTML> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Queue<ComponentHTML> b = (Queue<ComponentHTML>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Queue<ComponentHTML> a = (Queue<ComponentHTML>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 b.add(new Column(a,true)); RESULT = b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ROW_BODY",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ROW_BODY ::= ROW_BODY COLUMNA_INICIO COL_BODY COLUMNA_FINAL 
            {
              Queue<ComponentHTML> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Queue<ComponentHTML> b = (Queue<ComponentHTML>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Queue<ComponentHTML> a = (Queue<ComponentHTML>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 b.add(new Column(a,false)); RESULT = b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ROW_BODY",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ROW_BODY ::= COLUMNAC_INICIO COL_BODY COLUMNAC_FINAL 
            {
              Queue<ComponentHTML> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Queue<ComponentHTML> a = (Queue<ComponentHTML>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    Queue<ComponentHTML> colContenido = new LinkedList<ComponentHTML>();
    colContenido.add(new Column(a,true));
    RESULT = colContenido;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ROW_BODY",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ROW_BODY ::= COLUMNA_INICIO COL_BODY COLUMNA_FINAL 
            {
              Queue<ComponentHTML> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Queue<ComponentHTML> a = (Queue<ComponentHTML>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    Queue<ComponentHTML> colContenido = new LinkedList<ComponentHTML>();
    colContenido.add(new Column(a,false));
    RESULT = colContenido;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ROW_BODY",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // COL_BODY ::= COL_BODY COL_SUBBODY 
            {
              Queue<ComponentHTML> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Queue<ComponentHTML> a = (Queue<ComponentHTML>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComponentHTML b = (ComponentHTML)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 a.add(b); RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COL_BODY",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // COL_BODY ::= COL_SUBBODY 
            {
              Queue<ComponentHTML> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComponentHTML a = (ComponentHTML)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Queue<ComponentHTML> contenido = new LinkedList<ComponentHTML>();
    contenido.add(a);
    RESULT = contenido;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COL_BODY",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // COL_SUBBODY ::= SALTO 
            {
              ComponentHTML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BreakLine(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COL_SUBBODY",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // COL_SUBBODY ::= PARRAFO 
            {
              ComponentHTML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComponentHTML a = (ComponentHTML)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (ComponentHTML) a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COL_SUBBODY",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // COL_SUBBODY ::= IMAGEN 
            {
              ComponentHTML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComponentHTML a = (ComponentHTML)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (ComponentHTML) a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COL_SUBBODY",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // COL_SUBBODY ::= BOTON 
            {
              ComponentHTML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComponentHTML a = (ComponentHTML)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (ComponentHTML) a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COL_SUBBODY",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // COL_SUBBODY ::= HSCRIPT 
            {
              ComponentHTML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComponentHTML a = (ComponentHTML)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (ComponentHTML) a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COL_SUBBODY",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // COL_SUBBODY ::= PLAINTEXT 
            {
              ComponentHTML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new PlainText(a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COL_SUBBODY",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // BOOLEANO ::= VERDADERO 
            {
              boolean RESULT;
		 RESULT = true; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEANO",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // BOOLEANO ::= FALSO 
            {
              boolean RESULT;
		 RESULT = false; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEANO",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // HSCRIPT ::= HSCRIPT_INICIO HS_INICIO HSCRIPT_FINAL 
            {
              ComponentHTML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new PlainText(a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("HSCRIPT",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // HS_INICIO ::= HS_INICIO HS_BODY 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + b ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("HS_INICIO",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // HS_INICIO ::= HS_BODY 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("HS_INICIO",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // HS_BODY ::= HS_VAR SEMICOLON 
            {
              String RESULT =null;
		  RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("HS_BODY",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // HS_BODY ::= HS_STRUCT SEMICOLON 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Estructura a = (Estructura)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 listaEstrucutra.add(a); RESULT=""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("HS_BODY",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // HS_BODY ::= HS_ECHO SEMICOLON 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    /*Utilizar el nombre del atributo de la consola y utilizar setText(getText()+a)*/
    txtConsole.setText(txtConsole.getText()+"\n"+a.toString());
    RESULT=""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("HS_BODY",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // HS_BODY ::= HS_IF 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  /*Viene una cadena vacía o llena de algo :v */    RESULT=a.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("HS_BODY",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // HS_BODY ::= HS_REPETIR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 /*Viene una cadena vacía o llena de algo :v */ RESULT=a.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("HS_BODY",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // HS_BODY ::= SET_STRUCT SEMICOLON 
            {
              String RESULT =null;
		 RESULT="";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("HS_BODY",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // HS_BODY ::= INSERT_STRUCT SEMICOLON 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT= a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("HS_BODY",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // HS_BODY ::= BOTON_STRUCT SEMICOLON 
            {
              String RESULT =null;
		RESULT="";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("HS_BODY",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // HS_VAR ::= IDENTIFICADOR IGUAL OPER 
            {
              Variable RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
                Symbol temp = (java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2);
		String a = (String)(temp).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    //Retorna una nueva variable;
    boolean flag = false;
    for(Variable var : listaVariable){
        if(var.getIdentificador().equals(a.toString().substring(1))){
            var.setObjeto(b);
            flag = true;
            break;
        }
    }
    if (!flag){
        listaVariable.add(new Variable(b,a.toString().substring(1),temp.right , temp.left));
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("HS_VAR",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // HS_STRUCT ::= ESTRUCTURA IGUAL FUNCSTRUCT 
            {
              Estructura RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComponentHTML b = (ComponentHTML)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    //Retorna una nueva estructura
    RESULT = new Estructura(a.toString().substring(1), b);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("HS_STRUCT",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OPER ::= OPER MAS OPER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ( Double.parseDouble(a.toString()) + Double.parseDouble(b.toString()));  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPER",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OPER ::= OPER MENOS OPER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ( Double.parseDouble(a.toString()) - Double.parseDouble(b.toString()));  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPER",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OPER ::= OPER PRODUCTO OPER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ( Double.parseDouble(a.toString()) * Double.parseDouble(b.toString()));  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPER",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OPER ::= OPER DIVISION OPER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ( Double.parseDouble(a.toString()) / Double.parseDouble(b.toString()));  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPER",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OPER ::= PARIZQ OPER PARDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPER",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OPER ::= OPER AND OPER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (Boolean.parseBoolean(a.toString()) && Boolean.parseBoolean(b.toString()) ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPER",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OPER ::= OPER OR OPER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (Boolean.parseBoolean(a.toString()) || Boolean.parseBoolean(b.toString()) ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPER",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OPER ::= OPER MAYOR_QUE OPER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ( Double.parseDouble(a.toString()) > Double.parseDouble(b.toString()) ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPER",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OPER ::= OPER MENOR_QUE OPER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ( Double.parseDouble(a.toString()) < Double.parseDouble(b.toString()) ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPER",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPER ::= OPER MAYOR_QUE_IGUAL OPER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ( Double.parseDouble(a.toString()) >= Double.parseDouble(b.toString()) ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPER",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPER ::= OPER MENOR_QUE_IGUAL OPER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ( Double.parseDouble(a.toString()) <= Double.parseDouble(b.toString()) ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPER",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OPER ::= OPER IGUAL_IGUAL OPER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (a==b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPER",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OPER ::= OPER DIFERENTE OPER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (a!=b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPER",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OPER ::= NOT OPER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = !Boolean.parseBoolean(a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPER",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OPER ::= ENTERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPER",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OPER ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Double.parseDouble(a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPER",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OPER ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
    //Castea el identifcador
    String temp = a.toString().substring(1);
    //Contendrá el RESULT
    Object res = "";
    //Procede a buscarlos en la lista de variables
    for (Variable var : listaVariable){
        if (var.getIdentificador().equals(temp)){
            res = var.getObjeto();
        }
    }
    RESULT = res;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPER",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OPER ::= CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = a.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPER",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OPER ::= BOOLEANO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		boolean a = (boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPER",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OPER ::= GET_STRUCT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPER",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // FUNCSTRUCT ::= CREARPARRAFO PARIZQ PAR_BODY PARDER 
            {
              ComponentHTML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Paragraph a = (Paragraph)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCSTRUCT",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // FUNCSTRUCT ::= CREARTEXTOA PARIZQ OPER PARDER 
            {
              ComponentHTML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new TextA(a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCSTRUCT",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // FUNCSTRUCT ::= CREARTEXTOB PARIZQ OPER PARDER 
            {
              ComponentHTML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new TextB(a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCSTRUCT",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // FUNCSTRUCT ::= CREARIMAGEN PARIZQ IMG_BODY PARDER 
            {
              ComponentHTML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Image a = (Image)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCSTRUCT",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // FUNCSTRUCT ::= CREARTABLA PARIZQ TBL_BODY PARDER 
            {
              ComponentHTML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Queue<ComponentHTML> a = (Queue<ComponentHTML>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Table(a,false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCSTRUCT",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // FUNCSTRUCT ::= CREARBOTON PARIZQ OPER COMMA OPER PARDER 
            {
              ComponentHTML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Button(b.toString(),a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCSTRUCT",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SET_STRUCT ::= ESTRUCTURA DOT SETALINEACION PARIZQ OPER PARDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    //Castea el identifcador
    String temp = a.toString().substring(1);
    //Procede a buscarlos en la lista de variables
    for (Estructura var : listaEstrucutra){
        if (var.getIdentificador().equals(temp)){
            switch(b.toString())
            {
                case "izquierda":
                    ((Paragraph)var.getComponente()).setAlineado(Align.IZQ);
                    break;
                case "derecho":
                    ((Paragraph)var.getComponente()).setAlineado(Align.DER);
                    break;
                case "centrado":
                    ((Paragraph)var.getComponente()).setAlineado(Align.CENTER);
                    break;
                case  "justificado":
                    ((Paragraph)var.getComponente()).setAlineado(Align.JUSTIFY);
                    break;
            }
            break;
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SET_STRUCT",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SET_STRUCT ::= ESTRUCTURA DOT SETCONTENIDO PARIZQ OPER PARDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    //Castea el identifcador
    String temp = a.toString().substring(1);
    //Procede a buscarlos en la lista de variables
    for (Estructura var : listaEstrucutra){
        if (var.getIdentificador().equals(temp)){
            switch(var.getStruct())
            {
                case PARRAFO_:
                     ((Paragraph)var.getComponente()).setParrafo(b.toString());
                    break;
                case TEXTOA_:
                    ((TextA)var.getComponente()).setTexto(b.toString());
                    break;
                case TEXTOB_:
                    ((TextB)var.getComponente()).setTexto(b.toString());
                    break;
            }
            break;
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SET_STRUCT",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SET_STRUCT ::= ESTRUCTURA DOT SETPATH PARIZQ OPER PARDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    //Castea el identifcador
    String temp = a.toString().substring(1);
    //Procede a buscarlos en la lista de variables
    for (Estructura var : listaEstrucutra){
        if (var.getIdentificador().equals(temp)){
            ((Image)var.getComponente()).setPath(b.toString());
            break;
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SET_STRUCT",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // SET_STRUCT ::= ESTRUCTURA DOT SETALTO PARIZQ OPER PARDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    //Castea el identifcador
    String temp = a.toString().substring(1);
    //Procede a buscarlos en la lista de variables
    for (Estructura var : listaEstrucutra){
        if (var.getIdentificador().equals(temp)){
            ((Image)var.getComponente()).setAlto( (int) Double.parseDouble(b.toString()));
            break;
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SET_STRUCT",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SET_STRUCT ::= ESTRUCTURA DOT SETANCHO PARIZQ OPER PARDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    //Castea el identifcador
    String temp = a.toString().substring(1);
    //Procede a buscarlos en la lista de variables
    for (Estructura var : listaEstrucutra){
        if (var.getIdentificador().equals(temp)){
            ((Image)var.getComponente()).setAncho( (int) Double.parseDouble(b.toString()));
            break;
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SET_STRUCT",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // SET_STRUCT ::= ESTRUCTURA DOT SETTEXTO PARIZQ OPER PARDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    //Castea el identifcador
    String temp = a.toString().substring(1);
    //Procede a buscarlos en la lista de variables
    for (Estructura var : listaEstrucutra){
        if (var.getIdentificador().equals(temp)){
            ((Button)var.getComponente()).setTexto(b.toString());
            break;
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SET_STRUCT",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // SET_STRUCT ::= ESTRUCTURA DOT SETBORDE PARIZQ OPER PARDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    //Castea el identifcador
    String temp = a.toString().substring(1);
    //Procede a buscarlos en la lista de variables
    for (Estructura var : listaEstrucutra){
        if (var.getIdentificador().equals(temp)){
            ((Table)var.getComponente()).setBorde(Boolean.parseBoolean(b.toString()));
            break;
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SET_STRUCT",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // GET_STRUCT ::= ESTRUCTURA DOT GETALINEACION PARIZQ PARDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 
    //Castea el identifcador
    String temp = a.toString().substring(1);
    //Contendrá el RESULT
    Object res = "";
    //Procede a buscarlos en la lista de variables
    for (Estructura var : listaEstrucutra){
        if (var.getIdentificador().equals(temp)){
            switch(((Paragraph)var.getComponente()).getAlineado())
            {
                case IZQ:
                    res = "izquierda";
                    break;
                case DER:
                    res = "derecho";
                    break;
                case CENTER:
                    res = "centrado";
                    break;
                case  JUSTIFY:
                    res = "justificado";
                    break;
            }
        }
    }
    RESULT = res;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GET_STRUCT",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // GET_STRUCT ::= ESTRUCTURA DOT GETCONTENIDO PARIZQ PARDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		
    //Castea el identifcador
    String temp = a.toString().substring(1);
    //Contendrá el RESULT
    Object res = "";
    //Procede a buscarlos en la lista de variables
    for (Estructura var : listaEstrucutra){
        if (var.getIdentificador().equals(temp)){
            switch(var.getStruct())
            {
                case PARRAFO_:
                    res = ((Paragraph)var.getComponente()).getParrafo();
                    break;
                case TEXTOA_:
                    res = ((TextA)var.getComponente()).getTexto();
                    break;
                case TEXTOB_:
                    res = ((TextB)var.getComponente()).getTexto();
                    break;
            }
        }
    }
    RESULT = res;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GET_STRUCT",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // GET_STRUCT ::= ESTRUCTURA DOT GETPATH PARIZQ PARDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		
    //Castea el identifcador
    String temp = a.toString().substring(1);
    //Contendrá el RESULT
    String res = "";
    //Procede a buscarlos en la lista de variables
    for (Estructura var : listaEstrucutra){
        if (var.getIdentificador().equals(temp)){
            res = ((Image)var.getComponente()).getPath();
            System.out.println(res);
        }
    }
    RESULT = res;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GET_STRUCT",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // GET_STRUCT ::= ESTRUCTURA DOT GETALTO PARIZQ PARDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		
    //Castea el identifcador
    String temp = a.toString().substring(1);
    //Contendrá el RESULT
    Object res = "";
    //Procede a buscarlos en la lista de variables
    for (Estructura var : listaEstrucutra){
        if (var.getIdentificador().equals(temp)){
            res = ((Image)var.getComponente()).getAlto();
        }
    }
    RESULT = res;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GET_STRUCT",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // GET_STRUCT ::= ESTRUCTURA DOT GETANCHO PARIZQ PARDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		
    //Castea el identifcador
    String temp = a.toString().substring(1);
    //Contendrá el RESULT
    Object res = null;
    //Procede a buscarlos en la lista de variables
    for (Estructura var : listaEstrucutra){
        if (var.getIdentificador().equals(temp)){
            res = ((Image)var.getComponente()).getAncho();
        }
    }
    RESULT = res;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GET_STRUCT",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // GET_STRUCT ::= ESTRUCTURA DOT GETBORDE PARIZQ PARDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		
    //Castea el identifcador
    String temp = a.toString().substring(1);
    //Contendrá el RESULT
    Object res = "";
    //Procede a buscarlos en la lista de variables
    for (Estructura var : listaEstrucutra){
        if (var.getIdentificador().equals(temp)){
            res = ((Table)var.getComponente()).isBorde();
        }
    }
    RESULT = res;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GET_STRUCT",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // GET_STRUCT ::= ESTRUCTURA DOT GETTEXTO PARIZQ PARDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		
    //Castea el identifcador
    String temp = a.toString().substring(1);
    //Contendrá el RESULT
    Object res = "";
    //Procede a buscarlos en la lista de variables
    for (Estructura var : listaEstrucutra){
        if (var.getIdentificador().equals(temp)){
            res = ((Button)var.getComponente()).getTexto();
        }
    }
    RESULT = res; 

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GET_STRUCT",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // INSERT_STRUCT ::= ESTRUCTURA DOT INSERTAR PARIZQ PARDER 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		
    //Guardará el return :v
    String res = "";
    //Castea el identifcador
    String temp = a.toString().substring(1);
    //Procede a buscarlos en la lista de variables
    for (Estructura var : listaEstrucutra){
        if (var.getIdentificador().equals(temp)){
            res = var.getComponente().getHtml();
            break;
        }
    }
    RESULT = res;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSERT_STRUCT",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // PAR_BODY ::= OPER COMMA OPER 
            {
              Paragraph RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Paragraph par = null;
    switch(b.toString())
    {
        case "izquierda":
            par = new Paragraph(a.toString(), Align.IZQ);
            break;
        case "derecho":
            par = new Paragraph(a.toString(),Align.DER);
            break;
        case "centrado":
            par = new Paragraph(a.toString(), Align.CENTER);
            break;
        case  "justificado":
            par = new Paragraph(a.toString(), Align.JUSTIFY);
            break;
        default :
            par = new Paragraph(a.toString(), Align.IZQ);
            break;
    }
    RESULT = par;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PAR_BODY",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // PAR_BODY ::= OPER 
            {
              Paragraph RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new Paragraph(a.toString());

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PAR_BODY",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // IMG_BODY ::= OPER COMMA OPER COMMA OPER 
            {
              Image RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("uwu"); RESULT = new Image(a.toString(),(int) Double.parseDouble(b.toString()), (int) Double.parseDouble(c.toString()));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IMG_BODY",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // IMG_BODY ::= OPER COMMA OPER 
            {
              Image RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("uw2u"); RESULT = new Image(a.toString(),(int) Double.parseDouble(b.toString()), Dimension.ALTO );
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IMG_BODY",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // IMG_BODY ::= OPER 
            {
              Image RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("uw3u"); RESULT = new Image(a.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IMG_BODY",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // TBL_BODY ::= TBL_BODY COMMA CORIZQ TBL_SUBBODY CORDER 
            {
              Queue<ComponentHTML> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Queue<ComponentHTML> a = (Queue<ComponentHTML>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Queue<ComponentHTML> b = (Queue<ComponentHTML>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    a.add(new Column(b,false));
    RESULT = a;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TBL_BODY",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // TBL_BODY ::= CORIZQ TBL_SUBBODY CORDER 
            {
              Queue<ComponentHTML> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Queue<ComponentHTML> a = (Queue<ComponentHTML>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  
    Queue<ComponentHTML> filas = new LinkedList<ComponentHTML>(); 
    filas.add(new Column(a,true)) ; 
    RESULT = filas; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TBL_BODY",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // TBL_SUBBODY ::= TBL_SUBBODY COMMA OPER 
            {
              Queue<ComponentHTML> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Queue<ComponentHTML> a = (Queue<ComponentHTML>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 a.add(new PlainText(b.toString()));  RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TBL_SUBBODY",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // TBL_SUBBODY ::= OPER 
            {
              Queue<ComponentHTML> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Queue<ComponentHTML> cola = new LinkedList<ComponentHTML>(); cola.add(new PlainText(a.toString())); RESULT = cola;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TBL_SUBBODY",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // BOTON_STRUCT ::= ESTRUCTURA DOT CLICKBOTON PARIZQ OPER PARDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    //Castea el identifcador
    String temp = a.toString().substring(1);
    //Procede a buscarlos en la lista de variables
    for (Estructura var : listaEstrucutra){
        if (var.getIdentificador().equals(temp)){
            ((Button)var.getComponente()).setAlerta(b.toString());
            break;
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOTON_STRUCT",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // HS_ECHO ::= ECHO ECHO_BODY 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT  = a;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("HS_ECHO",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ECHO_BODY ::= ECHO_BODY DOT OPER 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = b.toString()+a.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ECHO_BODY",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ECHO_BODY ::= OPER 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ECHO_BODY",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // HS_IF ::= IF PARIZQ OPER PARDER LLVIZQ IF_BODY LLVDER 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    //Valor a devolver
    String res = "";
    if (Boolean.parseBoolean(a.toString())){
        //Asigna la cadena que se ha estado corriendo;
        res = b.toString();
    } 
    RESULT = res;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("HS_IF",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // HS_IF ::= IF PARIZQ OPER PARDER LLVIZQ IF_BODY LLVDER ELSE LLVIZQ IF_BODY LLVDER 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    //Valor a devolver
    String res = "";
    if (Boolean.parseBoolean(a.toString())){
        res = b.toString();
    } else {
        res = c.toString();
    }
    RESULT = res;   

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("HS_IF",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // IF_BODY ::= IF_BODY IF_SUBBODY 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString() + b.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_BODY",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // IF_BODY ::= IF_SUBBODY 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = a;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_BODY",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // IF_SUBBODY ::= INSERT_STRUCT SEMICOLON 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_SUBBODY",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // IF_SUBBODY ::= HS_IF 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_SUBBODY",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // IF_SUBBODY ::= HS_REPETIR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_SUBBODY",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // HS_REPETIR ::= REPETIR PARIZQ OPER PARDER LLVIZQ IF_BODY LLVDER 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    //Variable que se retornará
    String res = "";
    for(int i = 0 ; i < ( (int) Double.parseDouble(a.toString())); i++ ){
        res += b;
    }
    RESULT = res;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("HS_REPETIR",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
